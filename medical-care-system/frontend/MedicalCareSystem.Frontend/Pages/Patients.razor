@page "/patients"
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@using MedicalCareSystem.Frontend.Services
@using MedicalCareSystem.Frontend.Models

<PageTitle>Patients - Medical Care System</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-users me-2"></i>
                        Patient Management
                    </h3>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus me-2"></i>
                        Add New Patient
                    </button>
                </div>
                <div class="card-body">
                    @if (patients == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading patients...</p>
                        </div>
                    }
                    else if (patients.Count == 0)
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No patients found</h5>
                            <p class="text-muted">Start by adding your first patient.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>ID</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Phone</th>
                                        <th>Date of Birth</th>
                                        <th>Address</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var patient in patients)
                                    {
                                        <tr>
                                            <td>@patient.Id</td>
                                            <td>@patient.FullName</td>
                                            <td>@patient.Email</td>
                                            <td>@patient.PhoneNumber</td>
                                            <td>@patient.DateOfBirth.ToString("yyyy-MM-dd")</td>
                                            <td>@patient.Address</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditPatient(patient)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePatient(patient.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit Patient" : "Add New Patient")</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentPatient" OnValidSubmit="SavePatientAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <InputText id="firstName" class="form-control" @bind-Value="currentPatient.FirstName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <InputText id="lastName" class="form-control" @bind-Value="currentPatient.LastName" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="currentPatient.Email" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="phone" class="form-label">Phone Number</label>
                                <InputText id="phone" class="form-control" @bind-Value="currentPatient.PhoneNumber" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="dob" class="form-label">Date of Birth</label>
                                <InputDate id="dob" class="form-control" @bind-Value="currentPatient.DateOfBirth" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="gender" class="form-label">Gender</label>
                                <InputSelect id="gender" class="form-control" @bind-Value="currentPatient.Gender">
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <InputTextArea id="address" class="form-control" rows="3" @bind-Value="currentPatient.Address" />
                        </div>

                        <div class="mb-3">
                            <label for="emergencyContact" class="form-label">Emergency Contact</label>
                            <InputText id="emergencyContact" class="form-control" @bind-Value="currentPatient.EmergencyContact" />
                        </div>

                        <div class="mb-3">
                            <label for="medicalConditions" class="form-label">Medical Conditions</label>
                            <InputTextArea id="medicalConditions" class="form-control" rows="4" @bind-Value="currentPatient.MedicalConditions" />
                        </div>

                        <div class="mb-3">
                            <label for="allergies" class="form-label">Allergies</label>
                            <InputTextArea id="allergies" class="form-control" rows="3" @bind-Value="currentPatient.Allergies" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="bloodType" class="form-label">Blood Type</label>
                                <InputSelect id="bloodType" class="form-control" @bind-Value="currentPatient.BloodType">
                                    <option value="">Select Blood Type</option>
                                    <option value="A+">A+</option>
                                    <option value="A-">A-</option>
                                    <option value="B+">B+</option>
                                    <option value="B-">B-</option>
                                    <option value="AB+">AB+</option>
                                    <option value="AB-">AB-</option>
                                    <option value="O+">O+</option>
                                    <option value="O-">O-</option>
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="emergencyContactPhone" class="form-label">Emergency Contact Phone</label>
                                <InputText id="emergencyContactPhone" class="form-control" @bind-Value="currentPatient.EmergencyContactPhone" />
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Patient</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Patient> patients = new();
    private Patient currentPatient = new();
    private bool showModal = false;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
    }

    private async Task LoadPatients()
    {
        try
        {
            patients = await ApiService.GetPatientsAsync();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading patients: {ex.Message}");
        }
    }

    private void ShowCreateModal()
    {
        currentPatient = new Patient();
        isEditing = false;
        showModal = true;
    }

    private void EditPatient(Patient patient)
    {
        currentPatient = new Patient
        {
            Id = patient.Id,
            FirstName = patient.FirstName,
            LastName = patient.LastName,
            Email = patient.Email,
            PhoneNumber = patient.PhoneNumber,
            DateOfBirth = patient.DateOfBirth,
            Gender = patient.Gender,
            Address = patient.Address,
            EmergencyContact = patient.EmergencyContact,
            EmergencyContactPhone = patient.EmergencyContactPhone,
            BloodType = patient.BloodType,
            Allergies = patient.Allergies,
            MedicalConditions = patient.MedicalConditions
        };
        isEditing = true;
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        currentPatient = new Patient();
    }

    private async Task SavePatientAsync()
    {
        try
        {
            if (isEditing)
            {
                await ApiService.UpdatePatientAsync(currentPatient.Id, currentPatient);
            }
            else
            {
                await ApiService.CreatePatientAsync(currentPatient);
            }
            await LoadPatients();
            HideModal();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error saving patient: {ex.Message}");
        }
    }

    private async Task DeletePatient(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this patient?"))
        {
            try
            {
                await ApiService.DeletePatientAsync(id);
                await LoadPatients();
            }
            catch (Exception ex)
            {
                // Handle error
                Console.WriteLine($"Error deleting patient: {ex.Message}");
            }
        }
    }
}
