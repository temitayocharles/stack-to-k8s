name: Enhanced CI/CD Pipeline with Comprehensive Logging

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      scan_only:
        description: 'Run security scans only'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  LOG_LEVEL: 'INFO'
  SECURITY_SCAN_CONTINUE_ON_FAILURE: 'true'

jobs:
  # Enhanced Security Scanning with Comprehensive Logging
  enhanced-security-scan:
    name: 'Enhanced Security Scan & Vulnerability Assessment'
    runs-on: ubuntu-latest
    outputs:
      scan-results: ${{ steps.scan.outputs.results }}
      critical-count: ${{ steps.scan.outputs.critical }}
      high-count: ${{ steps.scan.outputs.high }}
      scan-status: ${{ steps.scan.outputs.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download Go dependencies
      run: |
        go mod download
        go mod tidy

    - name: Install security scanning tools
      run: |
        echo "Installing security scanning tools..."
        # Install Trivy for container scanning
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        # Install Gosec for Go security analysis
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        # Install Nancy for dependency checking
        go install github.com/sonatype-nexus-community/nancy@latest
        # Install Gitleaks for secret detection
        curl -sSfL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64.tar.gz | tar -xz -C /usr/local/bin --strip-components=1

    - name: Create logs directory
      run: mkdir -p logs security-reports

    - name: Initialize enhanced logging
      run: |
        echo "Initializing enhanced logging system..."
        # Create initial log entry
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [security-scan] Starting comprehensive security scan" >> logs/security-scan.log

    - name: Run Go Security Analysis (Gosec)
      id: gosec
      continue-on-error: true
      run: |
        echo "🔍 Running Go Security Analysis (Gosec)..."
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [gosec] Starting Go security analysis" >> logs/security-scan.log

        # Run gosec with detailed output
        gosec -fmt=json -out=security-reports/gosec-results.json -stdout -verbose ./... > security-reports/gosec-output.txt 2>&1 || true

        # Count findings
        GOSSEC_CRITICAL=$(grep -c '"severity":"CRITICAL"' security-reports/gosec-results.json || echo "0")
        GOSSEC_HIGH=$(grep -c '"severity":"HIGH"' security-reports/gosec-results.json || echo "0")
        GOSSEC_MEDIUM=$(grep -c '"severity":"MEDIUM"' security-reports/gosec-results.json || echo "0")
        GOSSEC_LOW=$(grep -c '"severity":"LOW"' security-reports/gosec-results.json || echo "0")

        echo "gosec_critical=$GOSSEC_CRITICAL" >> $GITHUB_OUTPUT
        echo "gosec_high=$GOSSEC_HIGH" >> $GITHUB_OUTPUT
        echo "gosec_medium=$GOSSEC_MEDIUM" >> $GITHUB_OUTPUT
        echo "gosec_low=$GOSSEC_LOW" >> $GITHUB_OUTPUT

        # Log results
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SECURITY] [gosec] Analysis completed - Critical: $GOSSEC_CRITICAL, High: $GOSSEC_HIGH, Medium: $GOSSEC_MEDIUM, Low: $GOSSEC_LOW" >> logs/security-scan.log

        # Display results with colors
        echo "📊 Gosec Results:"
        if [ "$GOSSEC_CRITICAL" -gt 0 ]; then
          echo -e "\033[31m🚨 CRITICAL: $GOSSEC_CRITICAL\033[0m"
        fi
        if [ "$GOSSEC_HIGH" -gt 0 ]; then
          echo -e "\033[33m⚠️  HIGH: $GOSSEC_HIGH\033[0m"
        fi
        if [ "$GOSSEC_MEDIUM" -gt 0 ]; then
          echo -e "\033[33m📋 MEDIUM: $GOSSEC_MEDIUM\033[0m"
        fi
        if [ "$GOSSEC_LOW" -gt 0 ]; then
          echo -e "\033[32mℹ️  LOW: $GOSSEC_LOW\033[0m"
        fi

    - name: Run Dependency Vulnerability Scan (Nancy)
      id: nancy
      continue-on-error: true
      run: |
        echo "🔍 Running Dependency Vulnerability Scan (Nancy)..."
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [nancy] Starting dependency vulnerability scan" >> logs/security-scan.log

        # Run nancy with detailed output
        nancy sleuth > security-reports/nancy-output.txt 2>&1 || true

        # Count vulnerabilities
        NANCY_VULNS=$(grep -c "Vulnerable" security-reports/nancy-output.txt || echo "0")

        echo "nancy_vulnerabilities=$NANCY_VULNS" >> $GITHUB_OUTPUT

        # Log results
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SECURITY] [nancy] Dependency scan completed - Vulnerabilities: $NANCY_VULNS" >> logs/security-scan.log

        # Display results
        echo "📊 Nancy Results:"
        if [ "$NANCY_VULNS" -gt 0 ]; then
          echo -e "\033[33m⚠️  Dependency Vulnerabilities: $NANCY_VULNS\033[0m"
        else
          echo -e "\033[32m✅ No dependency vulnerabilities found\033[0m"
        fi

    - name: Run Secret Detection (Gitleaks)
      id: gitleaks
      continue-on-error: true
      run: |
        echo "🔍 Running Secret Detection (Gitleaks)..."
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [gitleaks] Starting secret detection scan" >> logs/security-scan.log

        # Run gitleaks with detailed output
        gitleaks detect --verbose --redact --report-format json --report-path security-reports/gitleaks-results.json > security-reports/gitleaks-output.txt 2>&1 || true

        # Count findings
        GITLEAKS_SECRETS=$(grep -c '"rule"' security-reports/gitleaks-results.json || echo "0")

        echo "gitleaks_secrets=$GITLEAKS_SECRETS" >> $GITHUB_OUTPUT

        # Log results
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SECURITY] [gitleaks] Secret detection completed - Secrets found: $GITLEAKS_SECRETS" >> logs/security-scan.log

        # Display results
        echo "📊 Gitleaks Results:"
        if [ "$GITLEAKS_SECRETS" -gt 0 ]; then
          echo -e "\033[31m🚨 Potential Secrets Found: $GITLEAKS_SECRETS\033[0m"
        else
          echo -e "\033[32m✅ No secrets detected\033[0m"
        fi

    - name: Run Container Security Scan (Trivy)
      id: trivy
      continue-on-error: true
      run: |
        echo "🔍 Running Container Security Scan (Trivy)..."
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [trivy] Starting container security scan" >> logs/security-scan.log

        # Build Docker image for scanning
        docker build -t task-management-app:latest . --build-arg BUILDKIT_INLINE_CACHE=1

        # Run trivy scan
        trivy image --format json --output security-reports/trivy-results.json task-management-app:latest > security-reports/trivy-output.txt 2>&1 || true

        # Count vulnerabilities
        TRIVY_CRITICAL=$(grep -c '"Severity":"CRITICAL"' security-reports/trivy-results.json || echo "0")
        TRIVY_HIGH=$(grep -c '"Severity":"HIGH"' security-reports/trivy-results.json || echo "0")
        TRIVY_MEDIUM=$(grep -c '"Severity":"MEDIUM"' security-reports/trivy-results.json || echo "0")
        TRIVY_LOW=$(grep -c '"Severity":"LOW"' security-reports/trivy-results.json || echo "0")

        echo "trivy_critical=$TRIVY_CRITICAL" >> $GITHUB_OUTPUT
        echo "trivy_high=$TRIVY_HIGH" >> $GITHUB_OUTPUT
        echo "trivy_medium=$TRIVY_MEDIUM" >> $GITHUB_OUTPUT
        echo "trivy_low=$TRIVY_LOW" >> $GITHUB_OUTPUT

        # Log results
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SECURITY] [trivy] Container scan completed - Critical: $TRIVY_CRITICAL, High: $TRIVY_HIGH, Medium: $TRIVY_MEDIUM, Low: $TRIVY_LOW" >> logs/security-scan.log

        # Display results
        echo "📊 Trivy Results:"
        if [ "$TRIVY_CRITICAL" -gt 0 ]; then
          echo -e "\033[31m🚨 CRITICAL: $TRIVY_CRITICAL\033[0m"
        fi
        if [ "$TRIVY_HIGH" -gt 0 ]; then
          echo -e "\033[33m⚠️  HIGH: $TRIVY_HIGH\033[0m"
        fi
        if [ "$TRIVY_MEDIUM" -gt 0 ]; then
          echo -e "\033[33m📋 MEDIUM: $TRIVY_MEDIUM\033[0m"
        fi
        if [ "$TRIVY_LOW" -gt 0 ]; then
          echo -e "\033[32mℹ️  LOW: $TRIVY_LOW\033[0m"
        fi

    - name: Aggregate Security Scan Results
      id: scan
      run: |
        echo "📊 Aggregating Security Scan Results..."
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [aggregation] Starting results aggregation" >> logs/security-scan.log

        # Calculate totals
        CRITICAL_TOTAL=$(( ${{ steps.gosec.outputs.gosec_critical }} + ${{ steps.trivy.outputs.trivy_critical }} ))
        HIGH_TOTAL=$(( ${{ steps.gosec.outputs.gosec_high }} + ${{ steps.trivy.outputs.trivy_high }} + ${{ steps.nancy.outputs.nancy_vulnerabilities }} ))
        MEDIUM_TOTAL=$(( ${{ steps.gosec.outputs.gosec_medium }} + ${{ steps.trivy.outputs.trivy_medium }} ))
        LOW_TOTAL=$(( ${{ steps.gosec.outputs.gosec_low }} + ${{ steps.trivy.outputs.trivy_low }} ))

        # Determine overall status
        if [ "$CRITICAL_TOTAL" -gt 0 ] || [ "${{ steps.gitleaks.outputs.gitleaks_secrets }}" -gt 0 ]; then
          SCAN_STATUS="CRITICAL"
        elif [ "$HIGH_TOTAL" -gt 10 ]; then
          SCAN_STATUS="HIGH"
        elif [ "$HIGH_TOTAL" -gt 0 ] || [ "$MEDIUM_TOTAL" -gt 5 ]; then
          SCAN_STATUS="MEDIUM"
        else
          SCAN_STATUS="LOW"
        fi

        # Output results
        echo "results={\"critical\":$CRITICAL_TOTAL,\"high\":$HIGH_TOTAL,\"medium\":$MEDIUM_TOTAL,\"low\":$LOW_TOTAL,\"secrets\":${{ steps.gitleaks.outputs.gitleaks_secrets }},\"status\":\"$SCAN_STATUS\"}" >> $GITHUB_OUTPUT
        echo "critical=$CRITICAL_TOTAL" >> $GITHUB_OUTPUT
        echo "high=$HIGH_TOTAL" >> $GITHUB_OUTPUT
        echo "status=$SCAN_STATUS" >> $GITHUB_OUTPUT

        # Log final results
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SECURITY] [aggregation] Security scan completed - Status: $SCAN_STATUS, Critical: $CRITICAL_TOTAL, High: $HIGH_TOTAL, Medium: $MEDIUM_TOTAL, Low: $LOW_TOTAL, Secrets: ${{ steps.gitleaks.outputs.gitleaks_secrets }}" >> logs/security-scan.log

        # Display final results with colors
        echo "🎯 FINAL SECURITY SCAN RESULTS:"
        echo -e "\033[1mStatus: $SCAN_STATUS\033[0m"
        if [ "$CRITICAL_TOTAL" -gt 0 ]; then
          echo -e "\033[31m🚨 Critical Issues: $CRITICAL_TOTAL\033[0m"
        fi
        if [ "${{ steps.gitleaks.outputs.gitleaks_secrets }}" -gt 0 ]; then
          echo -e "\033[31m🔐 Potential Secrets: ${{ steps.gitleaks.outputs.gitleaks_secrets }}\033[0m"
        fi
        if [ "$HIGH_TOTAL" -gt 0 ]; then
          echo -e "\033[33m⚠️  High Priority: $HIGH_TOTAL\033[0m"
        fi
        if [ "$MEDIUM_TOTAL" -gt 0 ]; then
          echo -e "\033[33m📋 Medium Priority: $MEDIUM_TOTAL\033[0m"
        fi
        if [ "$LOW_TOTAL" -gt 0 ]; then
          echo -e "\033[32mℹ️  Low Priority: $LOW_TOTAL\033[0m"
        fi

        # Create comprehensive report
        echo "📄 Generating comprehensive security report..."
        {
          echo "TASK MANAGEMENT AI SYSTEM - SECURITY SCAN REPORT"
          echo "================================================="
          echo ""
          echo "Scan Date: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "Overall Status: $SCAN_STATUS"
          echo ""
          echo "SUMMARY"
          echo "-------"
          echo "Critical Issues: $CRITICAL_TOTAL"
          echo "High Priority: $HIGH_TOTAL"
          echo "Medium Priority: $MEDIUM_TOTAL"
          echo "Low Priority: $LOW_TOTAL"
          echo "Potential Secrets: ${{ steps.gitleaks.outputs.gitleaks_secrets }}"
          echo ""
          echo "DETAILED RESULTS"
          echo "================"
          echo ""
          echo "Go Security (Gosec):"
          echo "  Critical: ${{ steps.gosec.outputs.gosec_critical }}"
          echo "  High: ${{ steps.gosec.outputs.gosec_high }}"
          echo "  Medium: ${{ steps.gosec.outputs.gosec_medium }}"
          echo "  Low: ${{ steps.gosec.outputs.gosec_low }}"
          echo ""
          echo "Container Security (Trivy):"
          echo "  Critical: ${{ steps.trivy.outputs.trivy_critical }}"
          echo "  High: ${{ steps.trivy.outputs.trivy_high }}"
          echo "  Medium: ${{ steps.trivy.outputs.trivy_medium }}"
          echo "  Low: ${{ steps.trivy.outputs.trivy_low }}"
          echo ""
          echo "Dependency Vulnerabilities (Nancy): ${{ steps.nancy.outputs.nancy_vulnerabilities }}"
          echo ""
          echo "Secret Detection (Gitleaks): ${{ steps.gitleaks.outputs.gitleaks_secrets }}"
          echo ""
          echo "RECOMMENDATIONS"
          echo "==============="
          if [ "$CRITICAL_TOTAL" -gt 0 ]; then
            echo "🚨 CRITICAL: Immediate attention required for critical security issues"
          fi
          if [ "${{ steps.gitleaks.outputs.gitleaks_secrets }}" -gt 0 ]; then
            echo "🔐 SECRETS: Review and remove any detected secrets immediately"
          fi
          if [ "$HIGH_TOTAL" -gt 5 ]; then
            echo "⚠️  HIGH: Address high-priority issues promptly"
          fi
          if [ "$MEDIUM_TOTAL" -gt 10 ]; then
            echo "📋 MEDIUM: Review medium-priority issues in next sprint"
          fi
          echo "✅ LOW: Low-priority issues can be addressed in future updates"
          echo ""
          echo "NOTE: Pipeline continues despite security findings for development workflow"
          echo "All findings are logged and available for download"
        } > logs/comprehensive-security-report.txt

    - name: Upload Security Scan Logs
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-logs-${{ github.run_id }}
        path: |
          logs/
          security-reports/
        retention-days: 30

    - name: Generate Downloadable Reports
      run: |
        echo "📥 Generating downloadable security reports..."
        # Create timestamped reports
        TIMESTAMP=$(date '+%Y%m%d_%H%M%S')

        # Comprehensive report
        cp logs/comprehensive-security-report.txt "security-reports/comprehensive-security-report-${TIMESTAMP}.txt"

        # Individual tool reports
        if [ -f security-reports/gosec-output.txt ]; then
          cp security-reports/gosec-output.txt "security-reports/gosec-report-${TIMESTAMP}.txt"
        fi
        if [ -f security-reports/trivy-output.txt ]; then
          cp security-reports/trivy-output.txt "security-reports/trivy-report-${TIMESTAMP}.txt"
        fi
        if [ -f security-reports/nancy-output.txt ]; then
          cp security-reports/nancy-output.txt "security-reports/nancy-report-${TIMESTAMP}.txt"
        fi
        if [ -f security-reports/gitleaks-output.txt ]; then
          cp security-reports/gitleaks-output.txt "security-reports/gitleaks-report-${TIMESTAMP}.txt"
        fi

        echo "✅ Downloadable reports created in security-reports/ directory"

    - name: Upload Downloadable Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ github.run_id }}
        path: security-reports/*.txt
        retention-days: 30

    - name: Log Security Scan Completion
      run: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [security-scan] Security scan job completed successfully" >> logs/security-scan.log
        echo "🔒 Security scanning completed - all findings logged without failing pipeline"

    - name: Notify Security Scan Results
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.scan.outputs.status == 'CRITICAL' && 'failure' || 'success' }}
        text: |
          🔒 Security Scan Complete
          Status: ${{ steps.scan.outputs.status }}
          Critical: ${{ steps.scan.outputs.critical-count }}
          High: ${{ steps.scan.outputs.high-count }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Build and Test Job
  build-and-test:
    name: 'Build & Test'
    runs-on: ubuntu-latest
    needs: enhanced-security-scan
    if: ${{ !inputs.scan_only || inputs.scan_only == 'false' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download Go dependencies
      run: |
        go mod download
        go mod tidy

    - name: Run Go tests
      run: |
        echo "🧪 Running Go tests..."
        go test -v -race -coverprofile=coverage.out ./...

    - name: Generate test report
      run: |
        echo "📊 Generating test coverage report..."
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ github.run_id }}
        path: |
          coverage.out
          coverage.html
        retention-days: 30

    - name: Build application
      run: |
        echo "🔨 Building application..."
        go build -v -o bin/task-management-app ./cmd/server

    - name: Build Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build -t task-management-app:${{ github.sha }} .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ github.run_id }}
        path: |
          bin/
        retention-days: 30

    - name: Notify Build Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ✅ Build & Test Successful
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Duration: ${{ github.event.head_commit.timestamp }}
          [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Build Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ Build & Test Failed
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy Job (only on main branch)
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    needs: [enhanced-security-scan, build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !inputs.scan_only

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ github.run_id }}

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your deployment commands here
        echo "Deployment completed successfully"

    - name: Health check
      run: |
        echo "🏥 Running health checks..."
        # Add health check commands here
        echo "Health checks passed"

    - name: Log deployment
      run: |
        echo "📝 Logging deployment details..."
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [deployment] Application deployed to staging - SHA: ${{ github.sha }}" >> deployment.log

    - name: Upload deployment logs
      uses: actions/upload-artifact@v3
      with:
        name: deployment-logs-${{ github.run_id }}
        path: deployment.log
        retention-days: 30

    - name: Notify Deployment Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🚀 Deployment Successful
          Environment: Staging
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          SHA: ${{ github.sha }}
          [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Deployment Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ Deployment Failed
          Environment: Staging
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Final Summary Job
  summary:
    name: 'Pipeline Summary'
    runs-on: ubuntu-latest
    needs: [enhanced-security-scan, build-and-test, deploy]
    if: always()

    steps:
    - name: Download security scan logs
      uses: actions/download-artifact@v3
      with:
        name: security-scan-logs-${{ github.run_id }}
        path: security-logs/

    - name: Generate Pipeline Summary
      run: |
        echo "📋 Generating pipeline summary..."

        # Create summary report
        {
          echo "TASK MANAGEMENT AI SYSTEM - CI/CD PIPELINE SUMMARY"
          echo "=================================================="
          echo ""
          echo "Pipeline Execution: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo "Triggered by: ${{ github.actor }}"
          echo ""

          echo "JOB STATUS SUMMARY"
          echo "=================="
          echo "Security Scan: ${{ needs.enhanced-security-scan.result }}"
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo ""

          # Include security scan results if available
          if [ -f "security-logs/logs/comprehensive-security-report.txt" ]; then
            echo "SECURITY SCAN RESULTS"
            echo "====================="
            cat "security-logs/logs/comprehensive-security-report.txt"
            echo ""
          fi

          echo "ARTIFACTS GENERATED"
          echo "==================="
          echo "✅ Security scan logs and reports"
          echo "✅ Test coverage reports"
          echo "✅ Build artifacts"
          echo "✅ Deployment logs (if deployed)"
          echo ""

          echo "DOWNLOAD LINKS"
          echo "=============="
          echo "Security Reports: Available as workflow artifacts"
          echo "Test Results: Available as workflow artifacts"
          echo "Build Artifacts: Available as workflow artifacts"
          echo ""

          echo "PIPELINE NOTES"
          echo "=============="
          echo "• Security scans run without failing the pipeline"
          echo "• All findings are logged and available for download"
          echo "• Pipeline continues despite vulnerability findings"
          echo "• Comprehensive audit trail maintained"
          echo "• No secrets exposed in logs or artifacts"
        } > pipeline-summary.txt

    - name: Upload Pipeline Summary
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-summary-${{ github.run_id }}
        path: pipeline-summary.txt
        retention-days: 30

    - name: Display Pipeline Summary
      run: |
        echo "🎉 CI/CD Pipeline completed!"
        cat pipeline-summary.txt

    - name: Notify Pipeline Completion
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.enhanced-security-scan.result == 'success' && needs.build-and-test.result == 'success' && 'success' || 'failure' }}
        text: |
          🎯 Pipeline Complete
          Security: ${{ needs.enhanced-security-scan.result }}
          Build: ${{ needs.build-and-test.result }}
          Deploy: ${{ needs.deploy.result }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Duration: ${{ github.event.head_commit.timestamp }}
          [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Pipeline Status Notification
      run: |
        if [ "${{ needs.enhanced-security-scan.result }}" == "success" ] && [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ Pipeline completed successfully"
        else
          echo "⚠️  Pipeline completed with warnings"
        fi

        echo "📊 Security Scan Status: ${{ needs.enhanced-security-scan.outputs.scan-status }}"
        echo "🔢 Critical Issues: ${{ needs.enhanced-security-scan.outputs.critical-count }}"
        echo "🔢 High Priority: ${{ needs.enhanced-security-scan.outputs.high-count }}"
