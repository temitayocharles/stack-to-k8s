apiVersion: v1
kind: Namespace
metadata:
  name: taskmanagement-prod
  labels:
    app: taskmanagement
    environment: production
    tier: application
    istio-injection: enabled # Enable Istio service mesh
    monitoring: enabled
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: taskmanagement-config
  namespace: taskmanagement-prod
data:
  # Application configuration
  APP_ENV: "production"
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  
  # Database configuration
  DATABASE_HOST: "postgres-cluster.taskmanagement-prod.svc.cluster.local"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "taskmanagement"
  DATABASE_SSL_MODE: "require"
  DATABASE_MAX_CONNECTIONS: "100"
  DATABASE_CONNECTION_TIMEOUT: "30s"
  
  # Redis configuration
  REDIS_CLUSTER_ENDPOINTS: "redis-cluster.taskmanagement-prod.svc.cluster.local:6379"
  REDIS_SENTINEL_ENABLED: "true"
  REDIS_MASTER_NAME: "taskmanagement-master"
  REDIS_CONNECTION_POOL_SIZE: "50"
  
  # AI Engine configuration
  AI_ENGINE_ENABLED: "true"
  AI_MODEL_UPDATE_INTERVAL: "24h"
  AI_PREDICTION_CACHE_TTL: "1h"
  AI_TRAINING_SCHEDULE: "0 2 * * 0" # Weekly on Sunday at 2 AM
  
  # Real-time collaboration
  WEBSOCKET_MAX_CONNECTIONS: "10000"
  WEBSOCKET_HEARTBEAT_INTERVAL: "30s"
  WEBSOCKET_MESSAGE_BUFFER_SIZE: "1000"
  
  # Monitoring and observability
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  TRACING_ENABLED: "true"
  TRACING_SAMPLE_RATE: "0.1"
  JAEGER_ENDPOINT: "jaeger-collector.istio-system.svc.cluster.local:14268"
  
  # Security settings
  JWT_TOKEN_EXPIRY: "24h"
  JWT_REFRESH_TOKEN_EXPIRY: "168h" # 7 days
  RATE_LIMIT_REQUESTS_PER_MINUTE: "1000"
  CORS_ALLOWED_ORIGINS: "https://taskmanagement.example.com,https://mobile.taskmanagement.example.com"
  
  # Feature flags
  FEATURE_AI_RECOMMENDATIONS: "true"
  FEATURE_REAL_TIME_COLLABORATION: "true"
  FEATURE_ADVANCED_ANALYTICS: "true"
  FEATURE_PROJECT_TEMPLATES: "true"
  FEATURE_WORKFLOW_AUTOMATION: "true"
  
  # Performance tuning
  GOLANG_GOMAXPROCS: "8"
  GOLANG_GOGC: "100"
  HTTP_READ_TIMEOUT: "30s"
  HTTP_WRITE_TIMEOUT: "30s"
  HTTP_IDLE_TIMEOUT: "120s"
---
apiVersion: v1
kind: Secret
metadata:
  name: taskmanagement-secrets
  namespace: taskmanagement-prod
type: Opaque
stringData:
  # Database credentials
  DATABASE_USER: "taskmanagement_user"
  DATABASE_PASSWORD: "super-secure-db-password-change-in-production"
  
  # Redis authentication
  REDIS_PASSWORD: "redis-auth-password-change-in-production"
  
  # JWT secrets
  JWT_SECRET: "ultra-secure-jwt-secret-key-for-production-use"
  JWT_REFRESH_SECRET: "ultra-secure-refresh-token-secret-key"
  
  # External service API keys
  OPENAI_API_KEY: "sk-your-openai-api-key-for-ai-features"
  SENDGRID_API_KEY: "SG.your-sendgrid-api-key-for-notifications"
  SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
  
  # Monitoring credentials
  PROMETHEUS_AUTH_TOKEN: "prometheus-scraping-token"
  GRAFANA_API_KEY: "grafana-api-key-for-dashboards"
  
  # Cloud storage credentials
  AWS_ACCESS_KEY_ID: "your-aws-access-key-id"
  AWS_SECRET_ACCESS_KEY: "your-aws-secret-access-key"
  S3_BUCKET_NAME: "taskmanagement-attachments-prod"
  
  # Certificate and TLS
  TLS_CERT_FILE: "/etc/ssl/certs/taskmanagement.crt"
  TLS_KEY_FILE: "/etc/ssl/private/taskmanagement.key"
---
# High-availability PostgreSQL cluster
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres-cluster
  namespace: taskmanagement-prod
spec:
  instances: 3
  primaryUpdateStrategy: unsupervised
  
  postgresql:
    parameters:
      max_connections: "200"
      shared_buffers: "256MB"
      effective_cache_size: "1GB"
      maintenance_work_mem: "64MB"
      checkpoint_completion_target: "0.9"
      wal_buffers: "16MB"
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      work_mem: "4MB"
      min_wal_size: "1GB"
      max_wal_size: "4GB"
      max_worker_processes: "8"
      max_parallel_workers_per_gather: "4"
      max_parallel_workers: "8"
      max_parallel_maintenance_workers: "4"
  
  storage:
    size: 100Gi
    storageClass: "gp3-encrypted"
  
  monitoring:
    enabled: true
    
  backup:
    retentionPolicy: "30d"
    barmanObjectStore:
      destinationPath: "s3://taskmanagement-backups/postgres"
      s3Credentials:
        accessKeyId:
          name: taskmanagement-secrets
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: taskmanagement-secrets
          key: AWS_SECRET_ACCESS_KEY
      wal:
        retention: "7d"
      data:
        retention: "30d"
---
# Redis Cluster for caching and real-time features
apiVersion: redis.redis.opstreelabs.in/v1beta1
kind: RedisCluster
metadata:
  name: redis-cluster
  namespace: taskmanagement-prod
spec:
  clusterSize: 6
  
  redisExporter:
    enabled: true
    image: oliver006/redis_exporter:latest
    
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: "gp3-ssd"
        resources:
          requests:
            storage: 50Gi
            
  securityContext:
    runAsUser: 1000
    fsGroup: 1000
    
  persistenceEnabled: true
  
  nodeSelector:
    workload: "cache"
    
  tolerations:
  - key: "workload"
    operator: "Equal"
    value: "cache"
    effect: "NoSchedule"
---
# Advanced backend deployment with multiple replicas and intelligent routing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: taskmanagement-backend
  namespace: taskmanagement-prod
  labels:
    app: taskmanagement-backend
    version: v1
    component: api
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: taskmanagement-backend
  template:
    metadata:
      labels:
        app: taskmanagement-backend
        version: v1
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
        # Istio traffic management
        traffic.sidecar.istio.io/includeInboundPorts: "8080,9090"
        traffic.sidecar.istio.io/excludeOutboundRanges: "169.254.169.254/32"
    spec:
      serviceAccountName: taskmanagement-backend
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - taskmanagement-backend
              topologyKey: kubernetes.io/hostname
              
      # Node selection for performance-optimized nodes
      nodeSelector:
        workload: "compute-optimized"
        
      tolerations:
      - key: "workload"
        operator: "Equal"
        value: "compute-optimized"
        effect: "NoSchedule"
        
      # Init container for database migrations and setup
      initContainers:
      - name: db-migrate
        image: migrate/migrate:latest
        command:
        - sh
        - -c
        - |
          migrate -path /migrations -database "$DATABASE_URL" up
        env:
        - name: DATABASE_URL
          value: "postgres://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?sslmode=require"
        envFrom:
        - configMapRef:
            name: taskmanagement-config
        - secretRef:
            name: taskmanagement-secrets
        volumeMounts:
        - name: migrations
          mountPath: /migrations
          
      containers:
      - name: taskmanagement-backend
        image: ghcr.io/your-org/taskmanagement:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: websocket
          containerPort: 8081
          protocol: TCP
          
        env:
        - name: PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        - name: WEBSOCKET_PORT
          value: "8081"
        # Pod-specific environment variables
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
              
        envFrom:
        - configMapRef:
            name: taskmanagement-config
        - secretRef:
            name: taskmanagement-secrets
            
        # Resource management for optimal performance
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "2000m"
            ephemeral-storage: "5Gi"
            
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
          
        startupProbe:
          httpGet:
            path: /startup
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 2
          timeoutSeconds: 1
          failureThreshold: 30
          successThreshold: 1
          
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
        - name: config
          mountPath: /app/config
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ai-models
          mountPath: /app/models
          
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            
      # Sidecar container for log aggregation
      - name: fluent-bit
        image: fluent/fluent-bit:2.1.10
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: var-log
          mountPath: /var/log
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/
          
      # Sidecar container for AI model updates
      - name: ai-model-updater
        image: ghcr.io/your-org/ai-model-updater:latest
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        env:
        - name: MODEL_UPDATE_INTERVAL
          value: "24h"
        - name: MODEL_STORAGE_URL
          value: "s3://taskmanagement-models/"
        envFrom:
        - secretRef:
            name: taskmanagement-secrets
        volumeMounts:
        - name: ai-models
          mountPath: /app/models
          
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      - name: config
        configMap:
          name: taskmanagement-config
      - name: migrations
        configMap:
          name: db-migrations
      - name: tls-certs
        secret:
          secretName: taskmanagement-tls
      - name: ai-models
        persistentVolumeClaim:
          claimName: ai-models-pvc
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
---
# ServiceAccount with proper RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: taskmanagement-backend
  namespace: taskmanagement-prod
  labels:
    app: taskmanagement-backend
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: taskmanagement-prod
  name: taskmanagement-backend-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: taskmanagement-backend-binding
  namespace: taskmanagement-prod
subjects:
- kind: ServiceAccount
  name: taskmanagement-backend
  namespace: taskmanagement-prod
roleRef:
  kind: Role
  name: taskmanagement-backend-role
  apiGroup: rbac.authorization.k8s.io
---
# Load balancer service with session affinity for WebSocket connections
apiVersion: v1
kind: Service
metadata:
  name: taskmanagement-backend-service
  namespace: taskmanagement-prod
  labels:
    app: taskmanagement-backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours for WebSocket connections
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8080
    protocol: TCP
  - name: websocket
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: taskmanagement-backend
---
# PersistentVolumeClaim for AI models
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ai-models-pvc
  namespace: taskmanagement-prod
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "efs-sc"
  resources:
    requests:
      storage: 10Gi
