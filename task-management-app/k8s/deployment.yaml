apiVersion: v1
kind: Namespace
metadata:
  name: task-management
  labels:
    app: task-management
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: task-management-config
  namespace: task-management
data:
  COUCHDB_HOST: "couchdb-service"
  COUCHDB_PORT: "5984"
  COUCHDB_DATABASE: "tasks"
  BACKEND_PORT: "8080"
  FRONTEND_PORT: "3000"
  LOG_LEVEL: "info"
  CORS_ORIGINS: "*"
  JWT_EXPIRY: "24h"
---
apiVersion: v1
kind: Secret
metadata:
  name: task-management-secrets
  namespace: task-management
type: Opaque
data:
  COUCHDB_USER: YWRtaW4=  # admin
  COUCHDB_PASSWORD: cGFzc3dvcmQ=  # password
  JWT_SECRET: c3VwZXItc2VjcmV0LWp3dC1rZXktZm9yLXRhc2stbWFuYWdlbWVudA==
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: couchdb-pvc
  namespace: task-management
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: couchdb
  namespace: task-management
  labels:
    app: couchdb
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: couchdb
  template:
    metadata:
      labels:
        app: couchdb
    spec:
      containers:
      - name: couchdb
        image: couchdb:3.3
        ports:
        - containerPort: 5984
        env:
        - name: COUCHDB_USER
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: COUCHDB_USER
        - name: COUCHDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: COUCHDB_PASSWORD
        volumeMounts:
        - name: couchdb-storage
          mountPath: /opt/couchdb/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 5984
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5984
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: couchdb-storage
        persistentVolumeClaim:
          claimName: couchdb-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-service
  namespace: task-management
  labels:
    app: couchdb
spec:
  selector:
    app: couchdb
  ports:
  - port: 5984
    targetPort: 5984
    name: couchdb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-management-backend
  namespace: task-management
  labels:
    app: task-management-backend
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: task-management-backend
  template:
    metadata:
      labels:
        app: task-management-backend
    spec:
      containers:
      - name: backend
        image: task-management-backend:latest
        ports:
        - containerPort: 8080
        env:
        - name: COUCHDB_HOST
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: COUCHDB_HOST
        - name: COUCHDB_PORT
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: COUCHDB_PORT
        - name: COUCHDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: COUCHDB_DATABASE
        - name: COUCHDB_USER
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: COUCHDB_USER
        - name: COUCHDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: COUCHDB_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: JWT_SECRET
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: BACKEND_PORT
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: task-management-backend-service
  namespace: task-management
  labels:
    app: task-management-backend
spec:
  selector:
    app: task-management-backend
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-management-frontend
  namespace: task-management
  labels:
    app: task-management-frontend
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: task-management-frontend
  template:
    metadata:
      labels:
        app: task-management-frontend
    spec:
      containers:
      - name: frontend
        image: task-management-frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: VITE_API_URL
          value: "http://task-management-backend-service:8080"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: task-management-frontend-service
  namespace: task-management
  labels:
    app: task-management-frontend
spec:
  selector:
    app: task-management-frontend
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: task-management-ingress
  namespace: task-management
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - task-management.example.com
    secretName: task-management-tls
  rules:
  - host: task-management.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: task-management-backend-service
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: task-management-frontend-service
            port:
              number: 3000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-management-backend-hpa
  namespace: task-management
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-management-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-management-frontend-hpa
  namespace: task-management
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-management-frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
