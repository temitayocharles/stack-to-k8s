apiVersion: v1
kind: Namespace
metadata:
  name: task-management
  labels:
    app: task-management
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: task-management-config
  namespace: task-management
data:
  DATABASE_HOST: "postgres-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "taskmanagement"
  DATABASE_SSL_MODE: "disable"
  BACKEND_PORT: "8080"
  FRONTEND_PORT: "3000"
  LOG_LEVEL: "info"
  CORS_ORIGINS: "*"
  JWT_EXPIRY: "24h"
---
apiVersion: v1
kind: Secret
metadata:
  name: task-management-secrets
  namespace: task-management
type: Opaque
data:
  DATABASE_USER: dGFza3VzZXI=  # taskuser
  DATABASE_PASSWORD: dGFza3Bhc3M=  # taskpass
  JWT_SECRET: c3VwZXItc2VjcmV0LWp3dC1rZXktZm9yLXRhc2stbWFuYWdlbWVudA==
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: task-management
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: task-management
  labels:
    app: postgres
    tier: database
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "taskmanagement"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: DATABASE_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: DATABASE_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - taskmanagement
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - taskmanagement
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: task-management
data:
  init.sql: |
    -- Create users table
    CREATE TABLE IF NOT EXISTS users (
      id VARCHAR(50) PRIMARY KEY,
      username VARCHAR(100) UNIQUE NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      password_hash VARCHAR(255),
      role VARCHAR(50) DEFAULT 'user',
      avatar_url VARCHAR(500),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create projects table
    CREATE TABLE IF NOT EXISTS projects (
      id VARCHAR(50) PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      description TEXT,
      status VARCHAR(50) DEFAULT 'active',
      owner_id VARCHAR(50) REFERENCES users(id),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create tasks table
    CREATE TABLE IF NOT EXISTS tasks (
      id VARCHAR(50) PRIMARY KEY,
      title VARCHAR(255) NOT NULL,
      description TEXT,
      status VARCHAR(50) DEFAULT 'todo',
      priority VARCHAR(50) DEFAULT 'medium',
      assignee_id VARCHAR(50) REFERENCES users(id),
      project_id VARCHAR(50) REFERENCES projects(id),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create comments table
    CREATE TABLE IF NOT EXISTS comments (
      id VARCHAR(50) PRIMARY KEY,
      task_id VARCHAR(50) REFERENCES tasks(id),
      user_id VARCHAR(50) REFERENCES users(id),
      content TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);
    CREATE INDEX IF NOT EXISTS idx_tasks_assignee ON tasks(assignee_id);
    CREATE INDEX IF NOT EXISTS idx_tasks_project ON tasks(project_id);
    CREATE INDEX IF NOT EXISTS idx_comments_task ON comments(task_id);
    CREATE INDEX IF NOT EXISTS idx_projects_owner ON projects(owner_id);

    -- Insert sample data
    INSERT INTO users (id, username, email, role) VALUES
    ('user-1', 'john_doe', 'john@example.com', 'admin'),
    ('user-2', 'jane_smith', 'jane@example.com', 'user'),
    ('user-3', 'bob_wilson', 'bob@example.com', 'user');

    INSERT INTO projects (id, name, description, owner_id) VALUES
    ('project-1', 'Website Redesign', 'Complete overhaul of company website', 'user-1'),
    ('project-2', 'Mobile App Development', 'Native mobile application for iOS and Android', 'user-2');

    INSERT INTO tasks (id, title, description, status, priority, assignee_id, project_id) VALUES
    ('task-1', 'Design Homepage Mockups', 'Create wireframes and mockups for the new homepage design', 'in_progress', 'high', 'user-2', NULL),
    ('task-2', 'Set up Development Environment', 'Configure local development environment with Docker and required tools', 'completed', 'medium', 'user-1', NULL),
    ('task-3', 'API Documentation', 'Write comprehensive API documentation for all endpoints', 'todo', 'medium', 'user-3', NULL),
    ('task-4', 'Database Schema Design', 'Design and implement the database schema for the application', 'completed', 'high', 'user-1', NULL);
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: task-management
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-management-backend
  namespace: task-management
  labels:
    app: task-management-backend
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: task-management-backend
  template:
    metadata:
      labels:
        app: task-management-backend
    spec:
      containers:
      - name: backend
        image: task-management-backend:latest
        ports:
        - containerPort: 8080
        env:
        - name: DATABASE_URL
          value: "postgres://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?sslmode=$(DATABASE_SSL_MODE)"
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: DATABASE_NAME
        - name: DATABASE_SSL_MODE
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: DATABASE_SSL_MODE
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: DATABASE_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: task-management-secrets
              key: JWT_SECRET
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: task-management-config
              key: BACKEND_PORT
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: task-management-backend-service
  namespace: task-management
  labels:
    app: task-management-backend
spec:
  selector:
    app: task-management-backend
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-management-frontend
  namespace: task-management
  labels:
    app: task-management-frontend
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: task-management-frontend
  template:
    metadata:
      labels:
        app: task-management-frontend
    spec:
      containers:
      - name: frontend
        image: task-management-frontend:latest
        ports:
        - containerPort: 80
        env:
        - name: VITE_API_URL
          value: "http://task-management-backend-service:8080"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: task-management-frontend-service
  namespace: task-management
  labels:
    app: task-management-frontend
spec:
  selector:
    app: task-management-frontend
  ports:
  - port: 80
    targetPort: 80
    name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: task-management-ingress
  namespace: task-management
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - task-management.example.com
    secretName: task-management-tls
  rules:
  - host: task-management.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: task-management-backend-service
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: task-management-frontend-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-management-backend-hpa
  namespace: task-management
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-management-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-management-frontend-hpa
  namespace: task-management
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-management-frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
