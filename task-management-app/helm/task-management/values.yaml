# Default values for task-management.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# PostgreSQL configuration
postgresql:
  enabled: true
  image:
    registry: docker.io
    repository: postgres
    tag: "15-alpine"
  auth:
    postgresPassword: "changeme"
    username: "taskuser"
    password: "taskpass"
    database: "taskmanagement"
  architecture: standalone
  primary:
    persistence:
      enabled: true
      size: 10Gi
    initdb:
      scripts:
        init.sql: |
          -- Create users table
          CREATE TABLE IF NOT EXISTS users (
            id VARCHAR(50) PRIMARY KEY,
            username VARCHAR(100) UNIQUE NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255),
            role VARCHAR(50) DEFAULT 'user',
            avatar_url VARCHAR(500),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Insert sample data
          INSERT INTO users (id, username, email, role) VALUES
          ('user-1', 'john_doe', 'john@example.com', 'admin'),
          ('user-2', 'jane_smith', 'jane@example.com', 'user'),
          ('user-3', 'bob_wilson', 'bob@example.com', 'user');

# Backend configuration
backend:
  enabled: true
  replicaCount: 3
  image:
    registry: ghcr.io
    repository: your-org/task-management-app/backend
    tag: "latest"
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8080
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  env:
    - name: PORT
      value: "8080"
    - name: LOG_LEVEL
      value: "info"
    - name: DATABASE_SSL_MODE
      value: "disable"
  config:
    jwtSecret: "super-secret-jwt-key-change-in-production"
    corsOrigins: "*"

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  image:
    registry: ghcr.io
    repository: your-org/task-management-app/frontend
    tag: "latest"
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 80
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 64Mi
  env:
    - name: NODE_ENV
      value: "production"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: taskmanagement.example.com
      paths:
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: "{{ include \"task-management.fullname\" . }}-backend"
              port:
                number: 8080
        - path: /
          pathType: Prefix
          backend:
            service:
              name: "{{ include \"task-management.fullname\" . }}-frontend"
              port:
                number: 80
  tls:
    - secretName: taskmanagement-tls
      hosts:
        - taskmanagement.example.com

# Autoscaling configuration
autoscaling:
  enabled: true
  backend:
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  frontend:
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
  grafana:
    enabled: false
    dashboards:
      enabled: true

# Security configuration
security:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL

# Network policies
networkPolicy:
  enabled: true
  backend:
    enabled: true
  frontend:
    enabled: true
  postgresql:
    enabled: true

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Node selector and tolerations
nodeSelector: {}
tolerations: []
affinity: {}