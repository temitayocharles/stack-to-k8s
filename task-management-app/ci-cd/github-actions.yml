name: Task Management CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/task-management-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/task-management-frontend

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      couchdb:
        image: couchdb:3.3
        env:
          COUCHDB_USER: admin
          COUCHDB_PASSWORD: password
        ports:
          - 5984:5984
        options: >-
          --health-cmd "curl -f http://localhost:5984/"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run tests
      working-directory: ./backend
      env:
        COUCHDB_HOST: localhost
        COUCHDB_PORT: 5984
        COUCHDB_USER: admin
        COUCHDB_PASSWORD: password
        COUCHDB_DATABASE: test_tasks
        JWT_SECRET: test-secret
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'gosec-report.sarif'

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Run E2E tests
      working-directory: ./frontend
      run: |
        npm run build
        npm run preview &
        npx wait-on http://localhost:4173
        npm run test:e2e

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        sed -i "s|task-management-backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|g" k8s/deployment.yaml
        sed -i "s|task-management-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|g" k8s/deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/ -n task-management-staging
        
        # Wait for deployment to complete
        kubectl rollout status deployment/task-management-backend -n task-management-staging --timeout=300s
        kubectl rollout status deployment/task-management-frontend -n task-management-staging --timeout=300s

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Run basic health checks
        kubectl exec -n task-management-staging deployment/task-management-backend -- curl -f http://localhost:8080/health
        
        # Test frontend accessibility
        FRONTEND_IP=$(kubectl get service task-management-frontend-service -n task-management-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://$FRONTEND_IP:3000/ || echo "Frontend health check failed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        sed -i "s|task-management-backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|g" k8s/deployment.yaml
        sed -i "s|task-management-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|g" k8s/deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/ -n task-management
        
        # Wait for deployment to complete
        kubectl rollout status deployment/task-management-backend -n task-management --timeout=600s
        kubectl rollout status deployment/task-management-frontend -n task-management --timeout=600s

    - name: Run production health checks
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Comprehensive health checks
        kubectl exec -n task-management deployment/task-management-backend -- curl -f http://localhost:8080/health
        kubectl exec -n task-management deployment/task-management-backend -- curl -f http://localhost:8080/ready
        
        # Test database connectivity
        kubectl exec -n task-management deployment/task-management-backend -- curl -f http://couchdb-service:5984/

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Task Management App deployed successfully to production! ðŸš€'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Clean up old images
      run: |
        # Keep only last 10 images for each component
        echo "Cleaning up old container images..."
        # This would typically involve calling your registry's API to clean up old images
