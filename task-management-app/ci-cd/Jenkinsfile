pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-registry.com'
        IMAGE_NAME_BACKEND = 'task-management-backend'
        IMAGE_NAME_FRONTEND = 'task-management-frontend'
        KUBECONFIG_STAGING = credentials('kube-config-staging')
        KUBECONFIG_PROD = credentials('kube-config-prod')
        DOCKER_CREDENTIALS = credentials('docker-registry-credentials')
        COUCHDB_CREDENTIALS = credentials('couchdb-credentials')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.BUILD_TAG = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Test Backend') {
            agent {
                docker {
                    image 'golang:1.21'
                    args '-u root'
                }
            }
            steps {
                script {
                    // Start CouchDB for testing
                    sh '''
                        apt-get update && apt-get install -y curl
                        
                        # Install CouchDB for testing
                        docker run -d --name couchdb-test \
                            -p 5984:5984 \
                            -e COUCHDB_USER=${COUCHDB_CREDENTIALS_USR} \
                            -e COUCHDB_PASSWORD=${COUCHDB_CREDENTIALS_PSW} \
                            couchdb:3.3
                        
                        # Wait for CouchDB to be ready
                        for i in {1..30}; do
                            if curl -f http://localhost:5984/; then
                                break
                            fi
                            sleep 2
                        done
                    '''
                    
                    dir('backend') {
                        sh '''
                            export COUCHDB_HOST=localhost
                            export COUCHDB_PORT=5984
                            export COUCHDB_USER=${COUCHDB_CREDENTIALS_USR}
                            export COUCHDB_PASSWORD=${COUCHDB_CREDENTIALS_PSW}
                            export COUCHDB_DATABASE=test_tasks
                            export JWT_SECRET=test-secret
                            
                            go mod download
                            go test -v -race -coverprofile=coverage.out ./...
                            go tool cover -html=coverage.out -o coverage.html
                        '''
                    }
                }
            }
            post {
                always {
                    sh 'docker rm -f couchdb-test || true'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'backend',
                        reportFiles: 'coverage.html',
                        reportName: 'Go Coverage Report'
                    ])
                }
            }
        }
        
        stage('Test Frontend') {
            agent {
                docker {
                    image 'node:18'
                    args '-u root'
                }
            }
            steps {
                dir('frontend') {
                    sh '''
                        npm ci
                        npm run lint
                        npm run type-check
                        npm run test:coverage
                        npm run build
                    '''
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'frontend/coverage',
                        reportFiles: 'index.html',
                        reportName: 'Frontend Coverage Report'
                    ])
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('Backend Security') {
                    steps {
                        script {
                            sh '''
                                # Install and run gosec
                                curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b /usr/local/bin latest
                                gosec -fmt sarif -out gosec-report.sarif ./backend/...
                            '''
                        }
                    }
                }
                stage('Frontend Security') {
                    steps {
                        dir('frontend') {
                            sh '''
                                npm audit --audit-level=high
                                npx retire --exitwith 1
                            '''
                        }
                    }
                }
                stage('Docker Security') {
                    steps {
                        sh '''
                            # Install Trivy
                            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                            
                            # Scan filesystem
                            trivy fs --exit-code 1 --severity HIGH,CRITICAL .
                        '''
                    }
                }
            }
        }
        
        stage('Build Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            parallel {
                stage('Build Backend') {
                    steps {
                        script {
                            def backendImage = docker.build(
                                "${DOCKER_REGISTRY}/${IMAGE_NAME_BACKEND}:${BUILD_TAG}",
                                "./backend"
                            )
                            
                            docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                                backendImage.push()
                                backendImage.push("${env.BRANCH_NAME}-latest")
                            }
                            
                            env.BACKEND_IMAGE_TAG = "${BUILD_TAG}"
                        }
                    }
                }
                stage('Build Frontend') {
                    steps {
                        script {
                            def frontendImage = docker.build(
                                "${DOCKER_REGISTRY}/${IMAGE_NAME_FRONTEND}:${BUILD_TAG}",
                                "./frontend"
                            )
                            
                            docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                                frontendImage.push()
                                frontendImage.push("${env.BRANCH_NAME}-latest")
                            }
                            
                            env.FRONTEND_IMAGE_TAG = "${BUILD_TAG}"
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'kube-config-staging', variable: 'KUBECONFIG')]) {
                        sh '''
                            # Update image tags in manifests
                            sed -i "s|task-management-backend:latest|${DOCKER_REGISTRY}/${IMAGE_NAME_BACKEND}:${BACKEND_IMAGE_TAG}|g" k8s/deployment.yaml
                            sed -i "s|task-management-frontend:latest|${DOCKER_REGISTRY}/${IMAGE_NAME_FRONTEND}:${FRONTEND_IMAGE_TAG}|g" k8s/deployment.yaml
                            
                            # Apply to staging namespace
                            kubectl apply -f k8s/ -n task-management-staging
                            
                            # Wait for deployments
                            kubectl rollout status deployment/task-management-backend -n task-management-staging --timeout=300s
                            kubectl rollout status deployment/task-management-frontend -n task-management-staging --timeout=300s
                        '''
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'kube-config-staging', variable: 'KUBECONFIG')]) {
                        sh '''
                            # Wait for services to be ready
                            sleep 30
                            
                            # Run health checks
                            kubectl exec -n task-management-staging deployment/task-management-backend -- curl -f http://localhost:8080/health
                            
                            # Run integration tests
                            cd tests/integration
                            npm install
                            STAGING_URL=$(kubectl get ingress task-management-ingress -n task-management-staging -o jsonpath='{.spec.rules[0].host}')
                            API_URL=https://$STAGING_URL npm test
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Manual approval for production
                    input message: 'Deploy to Production?', ok: 'Deploy',
                          submitterParameter: 'APPROVER'
                    
                    withCredentials([file(credentialsId: 'kube-config-prod', variable: 'KUBECONFIG')]) {
                        sh '''
                            # Update image tags in manifests
                            sed -i "s|task-management-backend:latest|${DOCKER_REGISTRY}/${IMAGE_NAME_BACKEND}:${BACKEND_IMAGE_TAG}|g" k8s/deployment.yaml
                            sed -i "s|task-management-frontend:latest|${DOCKER_REGISTRY}/${IMAGE_NAME_FRONTEND}:${FRONTEND_IMAGE_TAG}|g" k8s/deployment.yaml
                            
                            # Apply to production namespace
                            kubectl apply -f k8s/ -n task-management
                            
                            # Wait for deployments
                            kubectl rollout status deployment/task-management-backend -n task-management --timeout=600s
                            kubectl rollout status deployment/task-management-frontend -n task-management --timeout=600s
                        '''
                    }
                }
            }
        }
        
        stage('Production Health Check') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'kube-config-prod', variable: 'KUBECONFIG')]) {
                        sh '''
                            # Wait for services to be ready
                            sleep 60
                            
                            # Comprehensive health checks
                            kubectl exec -n task-management deployment/task-management-backend -- curl -f http://localhost:8080/health
                            kubectl exec -n task-management deployment/task-management-backend -- curl -f http://localhost:8080/ready
                            
                            # Test database connectivity
                            kubectl exec -n task-management deployment/task-management-backend -- curl -f http://couchdb-service:5984/
                            
                            # Run smoke tests
                            cd tests/smoke
                            npm install
                            PROD_URL=$(kubectl get ingress task-management-ingress -n task-management -o jsonpath='{.spec.rules[0].host}')
                            API_URL=https://$PROD_URL npm test
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images
            sh '''
                docker image prune -f
                docker system prune -f
            '''
        }
        success {
            script {
                if (env.BRANCH_NAME == 'main') {
                    // Notify success
                    slackSend(
                        channel: '#deployments',
                        color: 'good',
                        message: "✅ Task Management App deployed successfully to production!\n" +
                                "Branch: ${env.BRANCH_NAME}\n" +
                                "Build: ${env.BUILD_NUMBER}\n" +
                                "Commit: ${env.GIT_COMMIT_SHORT}\n" +
                                "Approved by: ${env.APPROVER ?: 'N/A'}"
                    )
                }
            }
        }
        failure {
            slackSend(
                channel: '#deployments',
                color: 'danger',
                message: "❌ Task Management App deployment failed!\n" +
                        "Branch: ${env.BRANCH_NAME}\n" +
                        "Build: ${env.BUILD_NUMBER}\n" +
                        "Stage: ${env.STAGE_NAME}\n" +
                        "Build URL: ${env.BUILD_URL}"
            )
        }
    }
}
