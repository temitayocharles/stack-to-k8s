name: Weather App CI/CD Pipeline
on:
  push:
    branches: [main, develop]
    paths: 
      - 'weather-app/**'
  pull_request:
    branches: [main]
    paths:
      - 'weather-app/**'

env:
  REGISTRY: ghcr.io
  WEATHER_BACKEND_IMAGE: ghcr.io/${{ github.repository }}/weather-backend
  WEATHER_FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/weather-frontend
  DOCKER_BUILDKIT: 1

jobs:
  # ====================================
  # CODE QUALITY & SECURITY ANALYSIS
  # ====================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Detect Changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'weather-app/backend/**'
          frontend:
            - 'weather-app/frontend/**'

    - name: 🐍 Setup Python
      if: steps.changes.outputs.backend == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Python Dependencies
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd weather-app/backend
        pip install -r requirements.txt
        pip install flake8 black pytest safety bandit

    - name: 🧹 Python Code Formatting (Black)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd weather-app/backend
        black --check --diff .

    - name: 🔍 Python Linting (Flake8)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd weather-app/backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🔒 Python Security Check (Bandit)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd weather-app/backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium

    - name: 🛡️ Python Dependency Security (Safety)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd weather-app/backend
        safety check --json --output safety-report.json || true
        safety check

    - name: 🟢 Setup Node.js
      if: steps.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: weather-app/frontend/package-lock.json

    - name: 📦 Install Frontend Dependencies
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd weather-app/frontend
        npm ci

    - name: 🔍 Frontend Linting (ESLint)
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd weather-app/frontend
        npm run lint

    - name: 🔒 Frontend Security Audit
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd weather-app/frontend
        npm audit --audit-level critical

    - name: 📊 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: weather-app/

  # ====================================
  # AUTOMATED TESTING SUITE
  # ====================================
  testing:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.backend-changed == 'true' || needs.code-quality.outputs.frontend-changed == 'true'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      if: needs.code-quality.outputs.backend-changed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Backend Dependencies
      if: needs.code-quality.outputs.backend-changed == 'true'
      run: |
        cd weather-app/backend
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: 🧪 Backend Unit Tests
      if: needs.code-quality.outputs.backend-changed == 'true'
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      run: |
        cd weather-app/backend
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: 🔧 Backend Integration Tests
      if: needs.code-quality.outputs.backend-changed == 'true'
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      run: |
        cd weather-app/backend
        python -m pytest tests/integration/ -v

    - name: 🟢 Setup Node.js
      if: needs.code-quality.outputs.frontend-changed == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: weather-app/frontend/package-lock.json

    - name: 📦 Install Frontend Dependencies
      if: needs.code-quality.outputs.frontend-changed == 'true'
      run: |
        cd weather-app/frontend
        npm ci

    - name: 🏗️ Build Frontend
      if: needs.code-quality.outputs.frontend-changed == 'true'
      run: |
        cd weather-app/frontend
        npm run build

    - name: 🧪 Frontend Unit Tests
      if: needs.code-quality.outputs.frontend-changed == 'true'
      run: |
        cd weather-app/frontend
        npm test -- --coverage --watchAll=false

    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        files: ./weather-app/backend/coverage.xml,./weather-app/frontend/coverage/lcov.info
        flags: weather-app
        name: weather-app-coverage

  # ====================================
  # CONTAINER BUILD & SECURITY
  # ====================================
  build-and-scan:
    name: 🐳 Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    if: always() && (needs.code-quality.result == 'success')
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract Backend Metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.WEATHER_BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=backend-{{date 'YYYYMMDD'}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 📋 Extract Frontend Metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.WEATHER_FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=frontend-{{date 'YYYYMMDD'}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build Backend Image
      id: backend-build
      uses: docker/build-push-action@v5
      with:
        context: ./weather-app/backend
        file: ./weather-app/backend/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: 🏗️ Build Frontend Image
      id: frontend-build
      uses: docker/build-push-action@v5
      with:
        context: ./weather-app/frontend
        file: ./weather-app/frontend/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: 🔍 Run Trivy Security Scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.WEATHER_BACKEND_IMAGE }}:latest
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: 🔍 Run Trivy Security Scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.WEATHER_FRONTEND_IMAGE }}:latest
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: 📊 Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: |
          backend-trivy-results.sarif
          frontend-trivy-results.sarif

    - name: 🚫 Critical Vulnerability Check
      run: |
        echo "🔍 Checking for critical vulnerabilities..."
        
        # Check backend
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --exit-code 1 --severity CRITICAL \
          ${{ env.WEATHER_BACKEND_IMAGE }}:latest
        
        # Check frontend
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --exit-code 1 --severity CRITICAL \
          ${{ env.WEATHER_FRONTEND_IMAGE }}:latest

  # ====================================
  # DEVELOPMENT DEPLOYMENT
  # ====================================
  deploy-development:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: 
      name: development
      url: https://weather-dev.example.com

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

    - name: 🔄 Deploy to Development
      run: |
        # Update image tags in Kubernetes manifests
        cd weather-app/k8s/base
        
        # Update backend image
        kubectl set image deployment/weather-backend \
          weather-backend=${{ env.WEATHER_BACKEND_IMAGE }}@${{ needs.build-and-scan.outputs.backend-digest }} \
          -n weather-dev

        # Update frontend image
        kubectl set image deployment/weather-frontend \
          weather-frontend=${{ env.WEATHER_FRONTEND_IMAGE }}@${{ needs.build-and-scan.outputs.frontend-digest }} \
          -n weather-dev

        # Wait for rollout completion
        kubectl rollout status deployment/weather-backend -n weather-dev --timeout=300s
        kubectl rollout status deployment/weather-frontend -n weather-dev --timeout=300s

    - name: 🧪 Health Check
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Health check backend
        kubectl exec -n weather-dev deployment/weather-backend -- \
          curl -f http://localhost:5002/api/health
        
        # Health check frontend
        kubectl exec -n weather-dev deployment/weather-frontend -- \
          wget --spider --quiet http://localhost/

  # ====================================
  # STAGING DEPLOYMENT WITH APPROVAL
  # ====================================
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: staging
      url: https://weather-staging.example.com

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: 🔄 Deploy to Staging
      run: |
        cd weather-app/k8s/base
        
        # Apply all manifests with updated images
        kubectl apply -f . -n weather-staging
        
        # Update image tags
        kubectl set image deployment/weather-backend \
          weather-backend=${{ env.WEATHER_BACKEND_IMAGE }}@${{ needs.build-and-scan.outputs.backend-digest }} \
          -n weather-staging

        kubectl set image deployment/weather-frontend \
          weather-frontend=${{ env.WEATHER_FRONTEND_IMAGE }}@${{ needs.build-and-scan.outputs.frontend-digest }} \
          -n weather-staging

        # Wait for rollout
        kubectl rollout status deployment/weather-backend -n weather-staging --timeout=300s
        kubectl rollout status deployment/weather-frontend -n weather-staging --timeout=300s

    - name: 🔍 End-to-End Testing
      run: |
        # Install testing dependencies
        npm install -g newman
        
        # Run E2E tests against staging
        cd weather-app/tests/e2e
        newman run weather-api.postman_collection.json \
          --environment staging.postman_environment.json \
          --reporters cli,junit \
          --reporter-junit-export test-results.xml

    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: staging-test-results
        path: weather-app/tests/e2e/test-results.xml

  # ====================================
  # PRODUCTION DEPLOYMENT WITH CANARY
  # ====================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://weather.example.com

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

    - name: 🐤 Canary Deployment (10%)
      run: |
        cd weather-app/k8s/base
        
        # Deploy canary version with 10% traffic
        kubectl patch deployment weather-backend -n weather-prod -p \
          '{"spec":{"template":{"spec":{"containers":[{"name":"weather-backend","image":"${{ env.WEATHER_BACKEND_IMAGE }}@${{ needs.build-and-scan.outputs.backend-digest }}"}]}}}}'
        
        # Scale canary to 1 replica (10% of 10 total replicas)
        kubectl scale deployment weather-backend-canary -n weather-prod --replicas=1

    - name: ⏱️ Canary Monitoring (15 minutes)
      run: |
        echo "🔍 Monitoring canary deployment for 15 minutes..."
        
        # Monitor error rates and performance
        for i in {1..15}; do
          echo "Minute $i/15: Checking canary health..."
          
          # Check error rate (should be < 1%)
          ERROR_RATE=$(kubectl exec -n weather-prod deployment/prometheus -- \
            promtool query instant 'rate(http_requests_total{status=~"5.."}[5m])')
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "❌ High error rate detected: $ERROR_RATE"
            echo "🔄 Rolling back canary deployment"
            kubectl rollout undo deployment/weather-backend-canary -n weather-prod
            exit 1
          fi
          
          sleep 60
        done

    - name: 🚀 Full Production Deployment
      run: |
        echo "✅ Canary successful, proceeding with full deployment"
        
        # Update main deployment
        kubectl set image deployment/weather-backend \
          weather-backend=${{ env.WEATHER_BACKEND_IMAGE }}@${{ needs.build-and-scan.outputs.backend-digest }} \
          -n weather-prod

        kubectl set image deployment/weather-frontend \
          weather-frontend=${{ env.WEATHER_FRONTEND_IMAGE }}@${{ needs.build-and-scan.outputs.frontend-digest }} \
          -n weather-prod

        # Wait for rollout
        kubectl rollout status deployment/weather-backend -n weather-prod --timeout=600s
        kubectl rollout status deployment/weather-frontend -n weather-prod --timeout=600s

    - name: 🎉 Production Health Check
      run: |
        # Final health verification
        kubectl exec -n weather-prod deployment/weather-backend -- \
          curl -f http://localhost:5002/api/health
        
        echo "🌟 Weather App successfully deployed to production!"

  # ====================================
  # MONITORING & ALERTING
  # ====================================
  post-deployment-monitoring:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'

    steps:
    - name: 📈 Setup Monitoring Alerts
      run: |
        echo "🔔 Setting up post-deployment monitoring..."
        
        # Trigger Grafana dashboard refresh
        curl -X POST "${{ secrets.GRAFANA_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{"deployment": "weather-app", "version": "${{ github.sha }}", "environment": "production"}'

    - name: 📱 Notify Teams
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "🌤️ Weather App Deployment Complete!",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {"title": "Environment", "value": "Production", "short": true},
                  {"title": "Version", "value": "${{ github.sha }}", "short": true},
                  {"title": "Backend Image", "value": "${{ needs.build-and-scan.outputs.backend-image }}", "short": false},
                  {"title": "Frontend Image", "value": "${{ needs.build-and-scan.outputs.frontend-image }}", "short": false}
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ====================================
  # CLEANUP & RESOURCE MANAGEMENT
  # ====================================
  cleanup:
    name: 🧹 Cleanup & Resource Management
    runs-on: ubuntu-latest
    needs: [build-and-scan, deploy-development, deploy-staging, deploy-production]
    if: always()

    steps:
    - name: 🗑️ Clean Old Container Images
      run: |
        echo "🧹 Cleaning up old container images..."
        
        # Keep last 5 images for each component
        OLD_BACKEND_IMAGES=$(gh api \
          "repos/${{ github.repository }}/packages/container/weather-backend/versions" \
          --jq '.[5:] | .[].id')
        
        OLD_FRONTEND_IMAGES=$(gh api \
          "repos/${{ github.repository }}/packages/container/weather-frontend/versions" \
          --jq '.[5:] | .[].id')
        
        # Delete old backend images
        for image_id in $OLD_BACKEND_IMAGES; do
          gh api --method DELETE \
            "repos/${{ github.repository }}/packages/container/weather-backend/versions/$image_id"
        done
        
        # Delete old frontend images
        for image_id in $OLD_FRONTEND_IMAGES; do
          gh api --method DELETE \
            "repos/${{ github.repository }}/packages/container/weather-frontend/versions/$image_id"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 Resource Usage Report
      run: |
        echo "📊 Generating resource usage report..."
        echo "Deployment completed at: $(date)"
        echo "Total workflow duration: ${{ github.event.head_commit.timestamp }}"
        echo "Images built: 2 (backend + frontend)"
        echo "Environments deployed: 3 (dev + staging + prod)"