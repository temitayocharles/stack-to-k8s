apiVersion: v1
kind: Namespace
metadata:
  name: weather
  labels:
    name: weather
    app: weather-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: weather-config
  namespace: weather
data:
  FLASK_ENV: "production"
  FLASK_APP: "app.py"
  WEATHER_API_BASE_URL: "https://api.openweathermap.org/data/2.5"
  GEOCODING_API_URL: "https://api.openweathermap.org/geo/1.0"
  LOG_LEVEL: "INFO"
  CACHE_TYPE: "redis"
---
apiVersion: v1
kind: Secret
metadata:
  name: weather-secrets
  namespace: weather
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  OPENWEATHER_API_KEY: eW91ci1vcGVud2VhdGhlci1hcGkta2V5  # your-openweather-api-key
  JWT_SECRET_KEY: eW91ci1qd3Qtc2VjcmV0LWtleQ==          # your-jwt-secret-key
  DATABASE_URL: cG9zdGdyZXM6Ly91c2VyOnBhc3NAZGI6NTQzMi93ZWF0aGVy  # postgres://user:pass@db:5432/weather
  REDIS_URL: cmVkaXM6Ly9yZWRpczowMDAw                  # redis://redis:0000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-backend
  namespace: weather
  labels:
    app: weather-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: weather-backend
  template:
    metadata:
      labels:
        app: weather-backend
    spec:
      containers:
      - name: weather-backend
        image: weather-backend:latest
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: weather-config
        - secretRef:
            name: weather-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: weather-backend
  namespace: weather
  labels:
    app: weather-backend
spec:
  selector:
    app: weather-backend
  ports:
  - port: 5000
    targetPort: 5000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-frontend
  namespace: weather
  labels:
    app: weather-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: weather-frontend
  template:
    metadata:
      labels:
        app: weather-frontend
    spec:
      containers:
      - name: weather-frontend
        image: weather-frontend:latest
        ports:
        - containerPort: 80
        env:
        - name: REACT_APP_API_URL
          value: "http://weather-backend:5000"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: weather-frontend
  namespace: weather
  labels:
    app: weather-frontend
spec:
  selector:
    app: weather-frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: weather-ingress
  namespace: weather
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: weather-app.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: weather-frontend
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: weather-backend
            port:
              number: 5000
