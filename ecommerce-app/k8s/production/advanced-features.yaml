# ðŸš€ KUBERNETES ADVANCED FEATURES FOR PRODUCTION
# Enterprise-Grade Kubernetes Configurations

---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ecommerce-backend-hpa
  namespace: ecommerce-production
  labels:
    app: ecommerce-backend
    tier: production
    version: v1.0.0
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ecommerce-backend
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ecommerce-frontend-hpa
  namespace: ecommerce-production
  labels:
    app: ecommerce-frontend
    tier: production
    version: v1.0.0
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ecommerce-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75

---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ecommerce-backend-pdb
  namespace: ecommerce-production
  labels:
    app: ecommerce-backend
    tier: production
spec:
  selector:
    matchLabels:
      app: ecommerce-backend
  minAvailable: 2
  maxUnavailable: 1

---
# Pod Disruption Budget for Frontend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ecommerce-frontend-pdb
  namespace: ecommerce-production
  labels:
    app: ecommerce-frontend
    tier: production
spec:
  selector:
    matchLabels:
      app: ecommerce-frontend
  minAvailable: 1
  maxUnavailable: 50%

---
# Network Policy - Backend Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ecommerce-backend-network-policy
  namespace: ecommerce-production
  labels:
    app: ecommerce-backend
    tier: production
spec:
  podSelector:
    matchLabels:
      app: ecommerce-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: ecommerce-frontend
    - podSelector:
        matchLabels:
          app: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 5000
    - protocol: TCP
      port: 8080  # Health check port
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 27017
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53
  - to: []  # Allow HTTPS outbound for external APIs
    ports:
    - protocol: TCP
      port: 443

---
# Network Policy - Frontend Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ecommerce-frontend-network-policy
  namespace: ecommerce-production
  labels:
    app: ecommerce-frontend
    tier: production
spec:
  podSelector:
    matchLabels:
      app: ecommerce-frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: ecommerce-backend
    ports:
    - protocol: TCP
      port: 5000
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53

---
# Network Policy - Database Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ecommerce-database-network-policy
  namespace: ecommerce-production
  labels:
    app: mongodb
    tier: production
spec:
  podSelector:
    matchLabels:
      app: mongodb
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: ecommerce-backend
    - namespaceSelector:
        matchLabels:
          name: monitoring  # For Prometheus monitoring
    ports:
    - protocol: TCP
      port: 27017
  egress:
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53

---
# Network Policy - Redis Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ecommerce-redis-network-policy
  namespace: ecommerce-production
  labels:
    app: redis
    tier: production
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: ecommerce-backend
    - namespaceSelector:
        matchLabels:
          name: monitoring  # For Prometheus monitoring
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53

---
# Resource Quotas for Production Namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: ecommerce-production-quota
  namespace: ecommerce-production
  labels:
    tier: production
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    pods: "20"
    persistentvolumeclaims: "10"
    services: "10"
    secrets: "20"
    configmaps: "20"

---
# Limit Range for Production Namespace
apiVersion: v1
kind: LimitRange
metadata:
  name: ecommerce-production-limits
  namespace: ecommerce-production
  labels:
    tier: production
spec:
  limits:
  - default:
      cpu: 500m
      memory: 512Mi
    defaultRequest:
      cpu: 100m
      memory: 128Mi
    type: Container
  - max:
      cpu: 2
      memory: 4Gi
    min:
      cpu: 50m
      memory: 64Mi
    type: Container
  - max:
      storage: 10Gi
    min:
      storage: 1Gi
    type: PersistentVolumeClaim

---
# Priority Class for Critical Workloads
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: ecommerce-critical
  labels:
    tier: production
value: 1000
globalDefault: false
description: "Critical ecommerce workloads with high priority"

---
# Service Monitor for Prometheus (Production Monitoring)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ecommerce-backend-monitor
  namespace: ecommerce-production
  labels:
    app: ecommerce-backend
    tier: production
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: ecommerce-backend
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  - port: health
    path: /health
    interval: 15s
    scrapeTimeout: 5s

---
# Pod Monitor for Frontend Metrics
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: ecommerce-frontend-monitor
  namespace: ecommerce-production
  labels:
    app: ecommerce-frontend
    tier: production
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: ecommerce-frontend
  podMetricsEndpoints:
  - port: metrics
    path: /metrics
    interval: 30s

---
# Alert Manager Rules for Production
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: ecommerce-production-alerts
  namespace: ecommerce-production
  labels:
    app: ecommerce
    tier: production
    monitoring: prometheus
spec:
  groups:
  - name: ecommerce.production.rules
    rules:
    - alert: EcommerceBackendDown
      expr: up{job="ecommerce-backend"} == 0
      for: 2m
      labels:
        severity: critical
        service: ecommerce-backend
      annotations:
        summary: "Ecommerce Backend is down"
        description: "Ecommerce Backend has been down for more than 2 minutes"
    
    - alert: EcommerceHighCPU
      expr: rate(container_cpu_usage_seconds_total{pod=~"ecommerce-backend-.*"}[5m]) > 0.8
      for: 5m
      labels:
        severity: warning
        service: ecommerce-backend
      annotations:
        summary: "High CPU usage on Ecommerce Backend"
        description: "CPU usage is above 80% for 5 minutes"
    
    - alert: EcommerceHighMemory
      expr: container_memory_usage_bytes{pod=~"ecommerce-backend-.*"} / container_spec_memory_limit_bytes > 0.9
      for: 3m
      labels:
        severity: critical
        service: ecommerce-backend
      annotations:
        summary: "High Memory usage on Ecommerce Backend"
        description: "Memory usage is above 90% for 3 minutes"
    
    - alert: EcommerceDatabaseConnections
      expr: mongodb_connections{job="mongodb"} > 100
      for: 2m
      labels:
        severity: warning
        service: mongodb
      annotations:
        summary: "High database connections"
        description: "MongoDB has more than 100 active connections"
    
    - alert: EcommerceAPILatency
      expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="ecommerce-backend"}[5m])) > 0.5
      for: 3m
      labels:
        severity: warning
        service: ecommerce-backend
      annotations:
        summary: "High API latency"
        description: "95th percentile latency is above 500ms for 3 minutes"

---
# Ingress with advanced features
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ecommerce-production-ingress
  namespace: ecommerce-production
  labels:
    app: ecommerce
    tier: production
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://yourdomain.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  tls:
  - hosts:
    - ecommerce.yourdomain.com
    - api.ecommerce.yourdomain.com
    secretName: ecommerce-tls-secret
  rules:
  - host: ecommerce.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ecommerce-frontend-service
            port:
              number: 80
  - host: api.ecommerce.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ecommerce-backend-service
            port:
              number: 5000

---
# Cluster Role for Advanced Monitoring
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ecommerce-monitoring
  labels:
    app: ecommerce
    tier: production
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]

---
# Service Account for Monitoring
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecommerce-monitoring
  namespace: ecommerce-production
  labels:
    app: ecommerce
    tier: production

---
# Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ecommerce-monitoring
  labels:
    app: ecommerce
    tier: production
subjects:
- kind: ServiceAccount
  name: ecommerce-monitoring
  namespace: ecommerce-production
roleRef:
  kind: ClusterRole
  name: ecommerce-monitoring
  apiGroup: rbac.authorization.k8s.io