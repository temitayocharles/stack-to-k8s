pipeline {
    agent any
    
    environment {
        // AWS Configuration
        AWS_REGION = 'us-west-2'
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        CLUSTER_NAME = 'ecommerce-cluster'
        
        // ECR Configuration
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        BACKEND_REPO = 'ecommerce/backend'
        FRONTEND_REPO = 'ecommerce/frontend'
        
        // Application Configuration
        NAMESPACE = 'ecommerce'
        APP_NAME = 'ecommerce-platform'
        
        // Tools
        DOCKER_BUILDKIT = '1'
        KUBECONFIG = credentials('kubeconfig-file')
    }
    
    tools {
        nodejs '18'
        dockerTool 'docker-latest'
    }
    
    stages {
        stage('🚀 Checkout Code') {
            steps {
                echo "🔄 Checking out source code..."
                checkout scm
                
                script {
                    env.BUILD_NUMBER = "${BUILD_NUMBER}"
                    env.GIT_COMMIT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.IMAGE_TAG = "${env.GIT_COMMIT}-${env.BUILD_NUMBER}"
                }
                
                echo "✅ Build: ${env.BUILD_NUMBER}"
                echo "✅ Commit: ${env.GIT_COMMIT}"
                echo "✅ Image Tag: ${env.IMAGE_TAG}"
            }
        }
        
        stage('🔍 Code Quality & Security') {
            parallel {
                stage('Backend Analysis') {
                    steps {
                        dir('backend') {
                            echo "🔍 Running backend code analysis..."
                            
                            script {
                                // Create logs directory
                                sh 'mkdir -p logs'
                                
                                // Install dependencies
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh 'npm ci 2>&1 | tee logs/backend-install.log || true'
                                }
                                
                                // Run ESLint with detailed logging
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🔍 BACKEND ESLINT SCAN RESULTS" > logs/backend-lint-log.txt
                                        echo "=========================================" >> logs/backend-lint-log.txt
                                        echo "Scan Date: $(date)" >> logs/backend-lint-log.txt
                                        echo "Project: E-commerce Backend" >> logs/backend-lint-log.txt
                                        echo "=========================================" >> logs/backend-lint-log.txt
                                        echo "" >> logs/backend-lint-log.txt
                                        
                                        npm run lint 2>&1 | tee -a logs/backend-lint-log.txt || true
                                        
                                        echo "" >> logs/backend-lint-log.txt
                                        echo "✅ Lint scan completed - Pipeline continuing regardless of results" >> logs/backend-lint-log.txt
                                    '''
                                }
                                
                                // Run security audit with color-coded results
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🔒 BACKEND SECURITY AUDIT RESULTS" > logs/backend-security-scan.txt
                                        echo "==========================================" >> logs/backend-security-scan.txt
                                        echo "Scan Date: $(date)" >> logs/backend-security-scan.txt
                                        echo "Tool: npm audit" >> logs/backend-security-scan.txt
                                        echo "Severity Levels: LOW | MODERATE | HIGH | CRITICAL" >> logs/backend-security-scan.txt
                                        echo "==========================================" >> logs/backend-security-scan.txt
                                        echo "" >> logs/backend-security-scan.txt
                                        
                                        npm audit --audit-level=low --json 2>/dev/null | jq -r '
                                            if .vulnerabilities then
                                                .vulnerabilities | to_entries[] | 
                                                "⚠️  " + .key + " (" + .value.severity + ")" +
                                                "\\n   └─ " + .value.via[0].title + 
                                                "\\n   └─ Range: " + .value.range + "\\n"
                                            else
                                                "✅ No vulnerabilities found"
                                            end
                                        ' >> logs/backend-security-scan.txt 2>/dev/null || echo "✅ No vulnerabilities found or audit completed" >> logs/backend-security-scan.txt
                                        
                                        echo "" >> logs/backend-security-scan.txt
                                        echo "📋 SUMMARY:" >> logs/backend-security-scan.txt
                                        echo "✅ Security scan completed - Pipeline continuing regardless of findings" >> logs/backend-security-scan.txt
                                        echo "📥 Download this file for detailed vulnerability analysis" >> logs/backend-security-scan.txt
                                    '''
                                }
                                
                                // Run unit tests with comprehensive logging
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🧪 BACKEND UNIT TEST RESULTS" > logs/backend-test-log.txt
                                        echo "=====================================" >> logs/backend-test-log.txt
                                        echo "Test Date: $(date)" >> logs/backend-test-log.txt
                                        echo "Framework: Jest/Mocha" >> logs/backend-test-log.txt
                                        echo "=====================================" >> logs/backend-test-log.txt
                                        echo "" >> logs/backend-test-log.txt
                                        
                                        npm test 2>&1 | tee -a logs/backend-test-log.txt || true
                                        
                                        echo "" >> logs/backend-test-log.txt
                                        echo "📊 TEST SUMMARY:" >> logs/backend-test-log.txt
                                        echo "✅ Test execution completed - Pipeline continuing regardless of results" >> logs/backend-test-log.txt
                                    '''
                                }
                                
                                // Generate test coverage
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        npm run test:coverage 2>&1 | tee logs/backend-coverage.log || true
                                        
                                        echo "📈 BACKEND CODE COVERAGE REPORT" > logs/backend-coverage-log.txt
                                        echo "======================================" >> logs/backend-coverage-log.txt
                                        echo "Coverage Date: $(date)" >> logs/backend-coverage-log.txt
                                        echo "======================================" >> logs/backend-coverage-log.txt
                                        
                                        # Extract coverage summary if available
                                        if [ -f coverage/lcov-report/index.html ]; then
                                            echo "✅ Coverage report generated successfully" >> logs/backend-coverage-log.txt
                                        else
                                            echo "⚠️  Coverage report generation encountered issues" >> logs/backend-coverage-log.txt
                                        fi
                                        
                                        echo "✅ Coverage analysis completed - Pipeline continuing" >> logs/backend-coverage-log.txt
                                    '''
                                }
                            }
                            
                            // Archive all log files as downloadable artifacts
                            archiveArtifacts artifacts: 'logs/*.txt,logs/*.log', allowEmptyArchive: true
                            
                            // Publish test results (never fail on missing results)
                            publishTestResults([
                                testResultsPattern: 'coverage/junit.xml',
                                mergeResults: true,
                                failIfNoResults: false
                            ])
                            
                            // Publish coverage (never fail on missing coverage)
                            publishCoverage([
                                adapters: [istanbulCoberturaAdapter('coverage/cobertura-coverage.xml')],
                                sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                            ])
                        }
                    }
                }
                
                stage('Frontend Analysis') {
                    steps {
                        dir('frontend') {
                            echo "🔍 Running frontend code analysis..."
                            
                            script {
                                // Create logs directory
                                sh 'mkdir -p logs'
                                
                                // Install dependencies
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh 'npm ci 2>&1 | tee logs/frontend-install.log || true'
                                }
                                
                                // Run ESLint with detailed logging
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🔍 FRONTEND ESLINT SCAN RESULTS" > logs/frontend-lint-log.txt
                                        echo "=========================================" >> logs/frontend-lint-log.txt
                                        echo "Scan Date: $(date)" >> logs/frontend-lint-log.txt
                                        echo "Project: E-commerce Frontend (React)" >> logs/frontend-lint-log.txt
                                        echo "=========================================" >> logs/frontend-lint-log.txt
                                        echo "" >> logs/frontend-lint-log.txt
                                        
                                        npm run lint 2>&1 | tee -a logs/frontend-lint-log.txt || true
                                        
                                        echo "" >> logs/frontend-lint-log.txt
                                        echo "✅ Frontend lint scan completed - Pipeline continuing" >> logs/frontend-lint-log.txt
                                    '''
                                }
                                
                                // Run security audit
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🔒 FRONTEND SECURITY AUDIT RESULTS" > logs/frontend-security-scan.txt
                                        echo "===========================================" >> logs/frontend-security-scan.txt
                                        echo "Scan Date: $(date)" >> logs/frontend-security-scan.txt
                                        echo "Framework: React/Node.js Dependencies" >> logs/frontend-security-scan.txt
                                        echo "===========================================" >> logs/frontend-security-scan.txt
                                        echo "" >> logs/frontend-security-scan.txt
                                        
                                        npm audit --audit-level=low --json 2>/dev/null | jq -r '
                                            if .vulnerabilities then
                                                .vulnerabilities | to_entries[] | 
                                                "🚨 " + .key + " [" + .value.severity + "]" +
                                                "\\n   📋 " + .value.via[0].title + 
                                                "\\n   📦 Affected: " + .value.range + "\\n"
                                            else
                                                "✅ No vulnerabilities detected in frontend dependencies"
                                            end
                                        ' >> logs/frontend-security-scan.txt 2>/dev/null || echo "✅ No vulnerabilities found or scan completed" >> logs/frontend-security-scan.txt
                                        
                                        echo "" >> logs/frontend-security-scan.txt
                                        echo "📋 FRONTEND SECURITY SUMMARY:" >> logs/frontend-security-scan.txt
                                        echo "✅ Security audit completed - Pipeline continuing regardless of findings" >> logs/frontend-security-scan.txt
                                    '''
                                }
                                
                                // Build frontend
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🏗️ FRONTEND BUILD LOG" > logs/frontend-build-log.txt
                                        echo "==============================" >> logs/frontend-build-log.txt
                                        echo "Build Date: $(date)" >> logs/frontend-build-log.txt
                                        echo "==============================" >> logs/frontend-build-log.txt
                                        echo "" >> logs/frontend-build-log.txt
                                        
                                        npm run build 2>&1 | tee -a logs/frontend-build-log.txt || true
                                        
                                        echo "" >> logs/frontend-build-log.txt
                                        echo "✅ Frontend build completed - Pipeline continuing" >> logs/frontend-build-log.txt
                                    '''
                                }
                                
                                // Run unit tests
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🧪 FRONTEND UNIT TEST RESULTS" > logs/frontend-test-log.txt
                                        echo "======================================" >> logs/frontend-test-log.txt
                                        echo "Test Date: $(date)" >> logs/frontend-test-log.txt
                                        echo "Framework: Jest/React Testing Library" >> logs/frontend-test-log.txt
                                        echo "======================================" >> logs/frontend-test-log.txt
                                        echo "" >> logs/frontend-test-log.txt
                                        
                                        npm test -- --coverage --watchAll=false 2>&1 | tee -a logs/frontend-test-log.txt || true
                                        
                                        echo "" >> logs/frontend-test-log.txt
                                        echo "✅ Frontend test execution completed - Pipeline continuing" >> logs/frontend-test-log.txt
                                    '''
                                }
                            }
                            
                            // Archive all log files
                            archiveArtifacts artifacts: 'logs/*.txt,logs/*.log', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('Infrastructure Analysis') {
                    steps {
                        dir('k8s') {
                            echo "🔍 Validating Kubernetes manifests..."
                            
                            script {
                                // Create logs directory
                                sh 'mkdir -p logs'
                                
                                // Validate YAML syntax with comprehensive logging
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🏗️ KUBERNETES MANIFEST VALIDATION" > logs/k8s-validation-log.txt
                                        echo "========================================" >> logs/k8s-validation-log.txt
                                        echo "Validation Date: $(date)" >> logs/k8s-validation-log.txt
                                        echo "Tool: kubectl dry-run" >> logs/k8s-validation-log.txt
                                        echo "========================================" >> logs/k8s-validation-log.txt
                                        echo "" >> logs/k8s-validation-log.txt
                                        
                                        for file in *.yaml; do
                                            echo "📋 Validating: $file" >> logs/k8s-validation-log.txt
                                            kubectl --dry-run=client --validate=true apply -f "$file" >> logs/k8s-validation-log.txt 2>&1 || echo "⚠️  Validation issues in $file - see above details" >> logs/k8s-validation-log.txt
                                            echo "---" >> logs/k8s-validation-log.txt
                                        done
                                        
                                        echo "" >> logs/k8s-validation-log.txt
                                        echo "✅ Kubernetes manifest validation completed - Pipeline continuing" >> logs/k8s-validation-log.txt
                                    '''
                                }
                                
                                // Security scanning with Kubesec
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "🔒 KUBERNETES SECURITY SCAN (KUBESEC)" > logs/k8s-security-scan.txt
                                        echo "=============================================" >> logs/k8s-security-scan.txt
                                        echo "Scan Date: $(date)" >> logs/k8s-security-scan.txt
                                        echo "Tool: Kubesec.io" >> logs/k8s-security-scan.txt
                                        echo "=============================================" >> logs/k8s-security-scan.txt
                                        echo "" >> logs/k8s-security-scan.txt
                                        
                                        # Scan backend deployment
                                        if [ -f backend-deployment.yaml ]; then
                                            echo "🔍 BACKEND DEPLOYMENT SECURITY ANALYSIS:" >> logs/k8s-security-scan.txt
                                            curl -sSX POST --data-binary @backend-deployment.yaml \\
                                                https://v2.kubesec.io/scan | jq -r '
                                                "Score: " + (.score | tostring) + "/10" +
                                                "\\n\\n🔐 Security Recommendations:" +
                                                (if .advise then (.advise[] | "\\n  ⚡ " + .selector + ": " + .reason) else "\\n  ✅ No additional recommendations" end) +
                                                "\\n\\n⚠️  Potential Issues:" +
                                                (if .critical then (.critical[] | "\\n  🚨 " + .selector + ": " + .reason) else "\\n  ✅ No critical issues found" end) +
                                                "\\n"
                                            ' >> logs/k8s-security-scan.txt 2>/dev/null || echo "⚠️  Kubesec scan unavailable - skipping" >> logs/k8s-security-scan.txt
                                        fi
                                        
                                        # Scan frontend deployment
                                        if [ -f frontend-deployment.yaml ]; then
                                            echo "🔍 FRONTEND DEPLOYMENT SECURITY ANALYSIS:" >> logs/k8s-security-scan.txt
                                            curl -sSX POST --data-binary @frontend-deployment.yaml \\
                                                https://v2.kubesec.io/scan | jq -r '
                                                "Score: " + (.score | tostring) + "/10" +
                                                "\\n\\n🔐 Security Recommendations:" +
                                                (if .advise then (.advise[] | "\\n  ⚡ " + .selector + ": " + .reason) else "\\n  ✅ No additional recommendations" end) +
                                                "\\n\\n⚠️  Potential Issues:" +
                                                (if .critical then (.critical[] | "\\n  🚨 " + .selector + ": " + .reason) else "\\n  ✅ No critical issues found" end) +
                                                "\\n"
                                            ' >> logs/k8s-security-scan.txt 2>/dev/null || echo "⚠️  Kubesec scan unavailable - skipping" >> logs/k8s-security-scan.txt
                                        fi
                                        
                                        echo "" >> logs/k8s-security-scan.txt
                                        echo "📋 KUBERNETES SECURITY SUMMARY:" >> logs/k8s-security-scan.txt
                                        echo "✅ Security analysis completed - Pipeline continuing regardless of findings" >> logs/k8s-security-scan.txt
                                        echo "📥 Download this report for detailed security recommendations" >> logs/k8s-security-scan.txt
                                    '''
                                }
                            }
                            
                            // Archive Kubernetes logs
                            archiveArtifacts artifacts: 'logs/*.txt', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('🐳 Build Docker Images') {
            parallel {
                stage('Build Backend') {
                    steps {
                        dir('backend') {
                            echo "🐳 Building backend Docker image..."
                            
                            script {
                                def backendImage = docker.build(
                                    "${ECR_REGISTRY}/${BACKEND_REPO}:${IMAGE_TAG}",
                                    "--build-arg NODE_ENV=production ."
                                )
                                
                                // Tag as latest
                                backendImage.tag("${ECR_REGISTRY}/${BACKEND_REPO}:latest")
                                
                                // Store image for later use
                                env.BACKEND_IMAGE = "${ECR_REGISTRY}/${BACKEND_REPO}:${IMAGE_TAG}"
                            }
                        }
                    }
                }
                
                stage('Build Frontend') {
                    steps {
                        dir('frontend') {
                            echo "🐳 Building frontend Docker image..."
                            
                            script {
                                def frontendImage = docker.build(
                                    "${ECR_REGISTRY}/${FRONTEND_REPO}:${IMAGE_TAG}",
                                    "--build-arg NODE_ENV=production ."
                                )
                                
                                // Tag as latest
                                frontendImage.tag("${ECR_REGISTRY}/${FRONTEND_REPO}:latest")
                                
                                // Store image for later use
                                env.FRONTEND_IMAGE = "${ECR_REGISTRY}/${FRONTEND_REPO}:${IMAGE_TAG}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('🔒 Security Scanning') {
            parallel {
                stage('Backend Security Scan') {
                    steps {
                        echo "🔒 Scanning backend image for vulnerabilities..."
                        
                        script {
                            // Create logs directory
                            sh 'mkdir -p logs'
                            
                            // Trivy security scan with comprehensive logging
                            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                sh """
                                    echo "🔒 BACKEND CONTAINER SECURITY SCAN (TRIVY)" > logs/backend-trivy-scan.txt
                                    echo "=================================================" >> logs/backend-trivy-scan.txt
                                    echo "Scan Date: \$(date)" >> logs/backend-trivy-scan.txt
                                    echo "Image: ${env.BACKEND_IMAGE}" >> logs/backend-trivy-scan.txt
                                    echo "Tool: Trivy Container Scanner" >> logs/backend-trivy-scan.txt
                                    echo "=================================================" >> logs/backend-trivy-scan.txt
                                    echo "" >> logs/backend-trivy-scan.txt
                                    
                                    # Run Trivy scan with table output
                                    trivy image --exit-code 0 --severity HIGH,CRITICAL \\
                                        --format table \\
                                        ${env.BACKEND_IMAGE} >> logs/backend-trivy-scan.txt 2>&1 || true
                                    
                                    echo "" >> logs/backend-trivy-scan.txt
                                    echo "📊 VULNERABILITY SUMMARY:" >> logs/backend-trivy-scan.txt
                                    echo "================================" >> logs/backend-trivy-scan.txt
                                    
                                    # Count vulnerabilities by severity
                                    trivy image --exit-code 0 --severity CRITICAL \\
                                        --format json ${env.BACKEND_IMAGE} | \\
                                        jq -r '.Results[]?.Vulnerabilities // [] | length' | \\
                                        awk '{sum+=\$1} END {print "🚨 CRITICAL: " (sum ? sum : 0) " vulnerabilities"}' >> logs/backend-trivy-scan.txt 2>/dev/null || echo "🚨 CRITICAL: 0 vulnerabilities" >> logs/backend-trivy-scan.txt
                                    
                                    trivy image --exit-code 0 --severity HIGH \\
                                        --format json ${env.BACKEND_IMAGE} | \\
                                        jq -r '.Results[]?.Vulnerabilities // [] | length' | \\
                                        awk '{sum+=\$1} END {print "⚠️  HIGH: " (sum ? sum : 0) " vulnerabilities"}' >> logs/backend-trivy-scan.txt 2>/dev/null || echo "⚠️  HIGH: 0 vulnerabilities" >> logs/backend-trivy-scan.txt
                                    
                                    echo "" >> logs/backend-trivy-scan.txt
                                    echo "✅ Backend security scan completed - Pipeline continuing regardless of findings" >> logs/backend-trivy-scan.txt
                                    echo "📥 Download this report for detailed vulnerability analysis" >> logs/backend-trivy-scan.txt
                                """
                            }
                            
                            // Generate XML report for Jenkins (but don't fail on missing report)
                            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                sh """
                                    trivy image --exit-code 0 --severity HIGH,CRITICAL \\
                                        --format template --template '@contrib/junit.tpl' \\
                                        --output backend-security-report.xml \\
                                        ${env.BACKEND_IMAGE} || true
                                """
                            }
                        }
                        
                        // Archive security scan logs
                        archiveArtifacts artifacts: 'logs/backend-trivy-scan.txt', allowEmptyArchive: true
                        
                        // Publish security results (never fail on missing results)
                        publishTestResults([
                            testResultsPattern: 'backend-security-report.xml',
                            mergeResults: true,
                            failIfNoResults: false
                        ])
                    }
                }
                
                stage('Frontend Security Scan') {
                    steps {
                        echo "🔒 Scanning frontend image for vulnerabilities..."
                        
                        script {
                            // Create logs directory
                            sh 'mkdir -p logs'
                            
                            // Trivy security scan with comprehensive logging
                            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                sh """
                                    echo "🔒 FRONTEND CONTAINER SECURITY SCAN (TRIVY)" > logs/frontend-trivy-scan.txt
                                    echo "==================================================" >> logs/frontend-trivy-scan.txt
                                    echo "Scan Date: \$(date)" >> logs/frontend-trivy-scan.txt
                                    echo "Image: ${env.FRONTEND_IMAGE}" >> logs/frontend-trivy-scan.txt
                                    echo "Tool: Trivy Container Scanner" >> logs/frontend-trivy-scan.txt
                                    echo "==================================================" >> logs/frontend-trivy-scan.txt
                                    echo "" >> logs/frontend-trivy-scan.txt
                                    
                                    # Run Trivy scan with table output
                                    trivy image --exit-code 0 --severity HIGH,CRITICAL \\
                                        --format table \\
                                        ${env.FRONTEND_IMAGE} >> logs/frontend-trivy-scan.txt 2>&1 || true
                                    
                                    echo "" >> logs/frontend-trivy-scan.txt
                                    echo "📊 VULNERABILITY SUMMARY:" >> logs/frontend-trivy-scan.txt
                                    echo "=================================" >> logs/frontend-trivy-scan.txt
                                    
                                    # Count vulnerabilities by severity
                                    trivy image --exit-code 0 --severity CRITICAL \\
                                        --format json ${env.FRONTEND_IMAGE} | \\
                                        jq -r '.Results[]?.Vulnerabilities // [] | length' | \\
                                        awk '{sum+=\$1} END {print "🚨 CRITICAL: " (sum ? sum : 0) " vulnerabilities"}' >> logs/frontend-trivy-scan.txt 2>/dev/null || echo "🚨 CRITICAL: 0 vulnerabilities" >> logs/frontend-trivy-scan.txt
                                    
                                    trivy image --exit-code 0 --severity HIGH \\
                                        --format json ${env.FRONTEND_IMAGE} | \\
                                        jq -r '.Results[]?.Vulnerabilities // [] | length' | \\
                                        awk '{sum+=\$1} END {print "⚠️  HIGH: " (sum ? sum : 0) " vulnerabilities"}' >> logs/frontend-trivy-scan.txt 2>/dev/null || echo "⚠️  HIGH: 0 vulnerabilities" >> logs/frontend-trivy-scan.txt
                                    
                                    echo "" >> logs/frontend-trivy-scan.txt
                                    echo "✅ Frontend security scan completed - Pipeline continuing regardless of findings" >> logs/frontend-trivy-scan.txt
                                    echo "📥 Download this report for detailed vulnerability analysis" >> logs/frontend-trivy-scan.txt
                                """
                            }
                            
                            // Generate XML report for Jenkins
                            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                sh """
                                    trivy image --exit-code 0 --severity HIGH,CRITICAL \\
                                        --format template --template '@contrib/junit.tpl' \\
                                        --output frontend-security-report.xml \\
                                        ${env.FRONTEND_IMAGE} || true
                                """
                            }
                        }
                        
                        // Archive security scan logs
                        archiveArtifacts artifacts: 'logs/frontend-trivy-scan.txt', allowEmptyArchive: true
                        
                        // Publish security results (never fail on missing results)
                        publishTestResults([
                            testResultsPattern: 'frontend-security-report.xml',
                            mergeResults: true,
                            failIfNoResults: false
                        ])
                    }
                }
            }
        }
        
        stage('📦 Push to ECR') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps {
                echo "📦 Pushing images to ECR..."
                
                script {
                    // Login to ECR
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \\
                        docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    """
                    
                    // Push backend image
                    sh "docker push ${env.BACKEND_IMAGE}"
                    sh "docker push ${ECR_REGISTRY}/${BACKEND_REPO}:latest"
                    
                    // Push frontend image
                    sh "docker push ${env.FRONTEND_IMAGE}"
                    sh "docker push ${ECR_REGISTRY}/${FRONTEND_REPO}:latest"
                    
                    echo "✅ Images pushed successfully!"
                    echo "Backend: ${env.BACKEND_IMAGE}"
                    echo "Frontend: ${env.FRONTEND_IMAGE}"
                }
            }
        }
        
        stage('🚀 Deploy to Staging') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps {
                echo "🚀 Deploying to staging environment..."
                
                script {
                    // Update kubeconfig
                    sh """
                        aws eks update-kubeconfig \\
                            --region ${AWS_REGION} \\
                            --name ${CLUSTER_NAME}
                    """
                    
                    // Create staging namespace if it doesn't exist
                    sh """
                        kubectl create namespace ${NAMESPACE}-staging \\
                            --dry-run=client -o yaml | kubectl apply -f -
                    """
                    
                    // Deploy to staging with new images
                    dir('k8s') {
                        sh """
                            # Update image tags in deployments
                            sed -i.bak "s|image: .*backend.*|image: ${env.BACKEND_IMAGE}|g" backend-deployment.yaml
                            sed -i.bak "s|image: .*frontend.*|image: ${env.FRONTEND_IMAGE}|g" frontend-deployment.yaml
                            
                            # Apply manifests to staging
                            kubectl apply -f . -n ${NAMESPACE}-staging
                            
                            # Wait for rollout to complete
                            kubectl rollout status deployment/backend -n ${NAMESPACE}-staging --timeout=300s
                            kubectl rollout status deployment/frontend -n ${NAMESPACE}-staging --timeout=300s
                        """
                    }
                }
                
                // Run smoke tests
                sh """
                    echo "🧪 Running smoke tests..."
                    
                    # Wait for pods to be ready
                    kubectl wait --for=condition=ready pod -l app=backend -n ${NAMESPACE}-staging --timeout=300s
                    kubectl wait --for=condition=ready pod -l app=frontend -n ${NAMESPACE}-staging --timeout=300s
                    
                    # Get service endpoint
                    BACKEND_URL=\$(kubectl get service backend -n ${NAMESPACE}-staging -o jsonpath='{.spec.clusterIP}')
                    
                    # Test health endpoint
                    kubectl run curl-test --image=curlimages/curl --rm -i --restart=Never -n ${NAMESPACE}-staging -- \\
                        curl -f http://\$BACKEND_URL:5000/api/health || exit 1
                """
            }
        }
        
        stage('🎯 Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo "🎯 Deploying to production environment..."
                
                script {
                    // Manual approval for production deployment
                    timeout(time: 10, unit: 'MINUTES') {
                        input message: 'Deploy to Production?', 
                              parameters: [
                                  choice(
                                      name: 'DEPLOYMENT_STRATEGY',
                                      choices: ['rolling-update', 'blue-green'],
                                      description: 'Choose deployment strategy'
                                  )
                              ]
                    }
                    
                    // Deploy to production
                    dir('k8s') {
                        sh """
                            # Update image tags in deployments
                            sed -i.bak "s|image: .*backend.*|image: ${env.BACKEND_IMAGE}|g" backend-deployment.yaml
                            sed -i.bak "s|image: .*frontend.*|image: ${env.FRONTEND_IMAGE}|g" frontend-deployment.yaml
                            
                            # Apply manifests to production
                            kubectl apply -f . -n ${NAMESPACE}
                            
                            # Wait for rollout to complete
                            kubectl rollout status deployment/backend -n ${NAMESPACE} --timeout=600s
                            kubectl rollout status deployment/frontend -n ${NAMESPACE} --timeout=600s
                        """
                    }
                }
                
                // Production health checks
                sh """
                    echo "🔍 Running production health checks..."
                    
                    # Wait for pods to be ready
                    kubectl wait --for=condition=ready pod -l app=backend -n ${NAMESPACE} --timeout=600s
                    kubectl wait --for=condition=ready pod -l app=frontend -n ${NAMESPACE} --timeout=600s
                    
                    # Get ingress URL
                    INGRESS_URL=\$(kubectl get ingress ecommerce-ingress -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                    
                    # Wait for ingress to be ready
                    sleep 30
                    
                    # Test application endpoints
                    curl -f http://\$INGRESS_URL/api/health || exit 1
                    curl -f http://\$INGRESS_URL/ || exit 1
                """
            }
        }
    }
    
    post {
        always {
            echo "🧹 Cleaning up workspace..."
            
            // Archive ALL log files from all stages
            archiveArtifacts artifacts: '''
                backend/logs/*.txt,
                backend/logs/*.log,
                frontend/logs/*.txt,
                frontend/logs/*.log,
                k8s/logs/*.txt,
                logs/*.txt,
                backend/coverage/**/*,
                frontend/build/**/*,
                *-security-report.xml
            ''', allowEmptyArchive: true
            
            // Create comprehensive pipeline summary
            script {
                sh '''
                    echo "📋 COMPLETE PIPELINE EXECUTION SUMMARY" > pipeline-summary.txt
                    echo "=======================================" >> pipeline-summary.txt
                    echo "Pipeline Date: $(date)" >> pipeline-summary.txt
                    echo "Build Number: ${BUILD_NUMBER}" >> pipeline-summary.txt
                    echo "Git Commit: ${GIT_COMMIT}" >> pipeline-summary.txt
                    echo "Branch: ${BRANCH_NAME}" >> pipeline-summary.txt
                    echo "=======================================" >> pipeline-summary.txt
                    echo "" >> pipeline-summary.txt
                    echo "📥 DOWNLOADABLE SCAN REPORTS:" >> pipeline-summary.txt
                    echo "  🔍 backend-lint-log.txt - Backend code quality analysis" >> pipeline-summary.txt
                    echo "  🔍 frontend-lint-log.txt - Frontend code quality analysis" >> pipeline-summary.txt
                    echo "  🧪 backend-test-log.txt - Backend unit test results" >> pipeline-summary.txt
                    echo "  🧪 frontend-test-log.txt - Frontend unit test results" >> pipeline-summary.txt
                    echo "  🔒 backend-security-scan.txt - Backend dependency security audit" >> pipeline-summary.txt
                    echo "  🔒 frontend-security-scan.txt - Frontend dependency security audit" >> pipeline-summary.txt
                    echo "  🔒 backend-trivy-scan.txt - Backend container vulnerability scan" >> pipeline-summary.txt
                    echo "  🔒 frontend-trivy-scan.txt - Frontend container vulnerability scan" >> pipeline-summary.txt
                    echo "  🏗️ k8s-validation-log.txt - Kubernetes manifest validation" >> pipeline-summary.txt
                    echo "  🔒 k8s-security-scan.txt - Kubernetes security analysis" >> pipeline-summary.txt
                    echo "" >> pipeline-summary.txt
                    echo "✅ ALL SCANS COMPLETED - PIPELINE RESILIENT DESIGN ENSURES CONTINUATION" >> pipeline-summary.txt
                    echo "📥 Download individual log files for detailed analysis" >> pipeline-summary.txt
                '''
                
                // Archive the summary
                archiveArtifacts artifacts: 'pipeline-summary.txt', allowEmptyArchive: true
            }
            
            // Clean up Docker images
            sh '''
                docker image prune -f --filter "until=24h"
                docker container prune -f
            '''
            
            // Clean workspace
            cleanWs()
        }
        
        success {
            echo "✅ Pipeline completed successfully!"
            
            // Send success notification
            script {
                if (env.BRANCH_NAME == 'main') {
                    slackSend(
                        channel: '#deployments',
                        color: 'good',
                        message: """
                            🎉 Production deployment successful!
                            
                            • Build: ${env.BUILD_NUMBER}
                            • Commit: ${env.GIT_COMMIT}
                            • Images: 
                              - Backend: ${env.BACKEND_IMAGE}
                              - Frontend: ${env.FRONTEND_IMAGE}
                            
                            🔗 Application: http://your-load-balancer-url
                        """
                    )
                }
            }
        }
        
        failure {
            echo "❌ Pipeline failed!"
            
            // Send failure notification
            slackSend(
                channel: '#deployments',
                color: 'danger',
                message: """
                    💥 Pipeline failed!
                    
                    • Build: ${env.BUILD_NUMBER}
                    • Branch: ${env.BRANCH_NAME}
                    • Commit: ${env.GIT_COMMIT}
                    • Stage: ${env.STAGE_NAME}
                    
                    🔗 Build Log: ${env.BUILD_URL}
                """
            )
        }
        
        unstable {
            echo "⚠️ Pipeline unstable!"
            
            slackSend(
                channel: '#deployments',
                color: 'warning',
                message: """
                    ⚠️ Pipeline completed with warnings
                    
                    • Build: ${env.BUILD_NUMBER}
                    • Branch: ${env.BRANCH_NAME}
                    • Commit: ${env.GIT_COMMIT}
                    
                    Please review the test results and security scans.
                """
            )
        }
    }
}
