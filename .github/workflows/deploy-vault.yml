name: Deploy Vault and Secure Secrets

on:
  push:
    branches:
      - main  # Triggers on push to main branch

jobs:
  deploy-vault:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Vault Docker image
        run: |
          docker build -t ghcr.io/temitayocharles/full-stack-apps/vault-secured:latest -f Dockerfile.vault .

      - name: Run Vault container
        run: |
          docker run -d --name vault-container -p 8200:8200 \
            -e VAULT_DEV_ROOT_TOKEN_ID=${{ secrets.VAULT_ROOT_TOKEN || 'root' }} \
            -e VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200 \
            ghcr.io/temitayocharles/full-stack-apps/vault-secured:latest

      - name: Wait for Vault to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8200/v1/sys/health > /dev/null; then
              break
            fi
            sleep 2
          done

      - name: Initialize Vault with user credentials
        run: |
          export VAULT_TOKEN=${{ secrets.VAULT_ROOT_TOKEN || 'root' }}
          # Set up initial user
          docker exec -e VAULT_TOKEN=$VAULT_TOKEN vault-container vault auth enable userpass
          docker exec -e VAULT_TOKEN=$VAULT_TOKEN vault-container vault write auth/userpass/users/temitayocharles password=nutmuq-meRnod-3cyphp policies=default

      - name: Collect and encode global configs and secrets from workspace
        run: |
          export VAULT_TOKEN=${{ secrets.VAULT_ROOT_TOKEN || 'root' }}
          # Install jq and yq for parsing
          sudo apt-get update && sudo apt-get install -y jq
          curl -Lo yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && chmod +x yq && sudo mv yq /usr/local/bin/

          # Find all config and secret files in the workspace (excluding .git and node_modules)
          find . -type f \( -name "*.json" -o -name "*.yaml" -o -name "*.yml" -o -name "*.tfvars" -o -name "*.env" \) -not -path "./.git/*" -not -path "./node_modules/*" | while read file; do
            echo "Processing $file"
            
            # Encode entire file
            encoded=$(base64 -w 0 "$file")
            secret_path="secret/files/$(basename "$file")"
            docker exec -e VAULT_TOKEN=$VAULT_TOKEN vault-container vault kv put "$secret_path" content="$encoded"
            
            # Extract key-value pairs based on file type
            if [[ "$file" == *.json ]]; then
              jq -r 'to_entries[] | "\(.key)=\(.value)"' "$file" 2>/dev/null | while read kv; do
                key=$(echo "$kv" | cut -d'=' -f1)
                value=$(echo "$kv" | cut -d'=' -f2-)
                if [ -n "$key" ] && [ -n "$value" ]; then
                  docker exec -e VAULT_TOKEN=$VAULT_TOKEN vault-container vault kv put "secret/kv/$(basename "$file" .json)/$key" value="$value"
                fi
              done
            elif [[ "$file" == *.yaml ]] || [[ "$file" == *.yml ]]; then
              yq -r 'to_entries[] | "\(.key)=\(.value)"' "$file" 2>/dev/null | while read kv; do
                key=$(echo "$kv" | cut -d'=' -f1)
                value=$(echo "$kv" | cut -d'=' -f2-)
                if [ -n "$key" ] && [ -n "$value" ]; then
                  docker exec -e VAULT_TOKEN=$VAULT_TOKEN vault-container vault kv put "secret/kv/$(basename "$file" .${file##*.})/$key" value="$value"
                fi
              done
            elif [[ "$file" == *.env ]]; then
              while IFS='=' read -r key value; do
                # Skip comments and empty lines
                [[ $key =~ ^[[:space:]]*# ]] && continue
                [[ -z "$key" ]] && continue
                if [ -n "$key" ] && [ -n "$value" ]; then
                  docker exec -e VAULT_TOKEN=$VAULT_TOKEN vault-container vault kv put "secret/kv/$(basename "$file" .env)/$key" value="$value"
                fi
              done < "$file"
            elif [[ "$file" == *.tfvars ]]; then
              # For .tfvars, encode the whole file since parsing HCL is complex
              echo "Storing .tfvars file as encoded content"
            fi
          done

      - name: Inject generic secrets into Vault
        run: |
          export VAULT_TOKEN=${{ secrets.VAULT_ROOT_TOKEN || 'root' }}
          # Example generic secrets (replace with actual ones)
          docker exec -e VAULT_TOKEN=$VAULT_TOKEN vault-container vault kv put secret/global/database password="genericpass123"
          docker exec -e VAULT_TOKEN=$VAULT_TOKEN vault-container vault kv put secret/global/api_key key="genericapikey456"
          # Add more as needed

      - name: Push Vault image to GHCR
        run: |
          docker push ghcr.io/temitayocharles/full-stack-apps/vault-secured:latest

      - name: Clean up
        run: |
          docker stop vault-container
          docker rm vault-container
