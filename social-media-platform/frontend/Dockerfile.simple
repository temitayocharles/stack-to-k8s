# Simple React Web Build for Social Media Platform
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with legacy peer deps
RUN npm install --legacy-peer-deps

# Copy source code
COPY . .

# Create a simple build script that creates static files
RUN mkdir -p build && \
    cat > build/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Social Media Platform</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .header { text-align: center; color: #333; margin-bottom: 30px; }
        .section { margin: 20px 0; padding: 15px; border-left: 4px solid #007bff; background: #f8f9fa; }
        .api-test { margin: 10px 0; padding: 10px; background: #e9ecef; border-radius: 4px; }
        .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #0056b3; }
        .result { margin-top: 10px; padding: 10px; background: #fff; border: 1px solid #ddd; border-radius: 4px; }
        pre { background: #f1f3f4; padding: 10px; border-radius: 4px; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="header">üöÄ Social Media Platform</h1>
        
        <div class="section">
            <h2>üì± Platform Overview</h2>
            <p>A modern social media platform built with React Native Web and Ruby Sinatra backend.</p>
            <p><strong>Status:</strong> <span style="color: green;">‚úÖ Running</span></p>
        </div>

        <div class="section">
            <h2>üîß API Testing</h2>
            <div class="api-test">
                <button class="btn" onclick="testHealth()">Test Health Check</button>
                <button class="btn" onclick="testUsers()">Get Users</button>
                <button class="btn" onclick="testPosts()">Get Posts</button>
                <div id="apiResult" class="result" style="display: none;"></div>
            </div>
        </div>

        <div class="section">
            <h2>üë• Sample Users</h2>
            <div id="usersList">Loading users...</div>
        </div>

        <div class="section">
            <h2>üìù Recent Posts</h2>
            <div id="postsList">Loading posts...</div>
        </div>

        <div class="section">
            <h2>üèóÔ∏è Architecture</h2>
            <ul>
                <li><strong>Frontend:</strong> React Native Web (containerized)</li>
                <li><strong>Backend:</strong> Ruby Sinatra API (containerized)</li>
                <li><strong>Database:</strong> PostgreSQL (containerized)</li>
                <li><strong>Cache:</strong> Redis (containerized)</li>
                <li><strong>Deployment:</strong> Docker Compose + Kubernetes Ready</li>
            </ul>
        </div>
    </div>

    <script>
        const API_BASE = "/api";

        async function makeRequest(endpoint) {
            try {
                const response = await fetch(API_BASE + endpoint);
                if (!response.ok) throw new Error(\`HTTP \${response.status}\`);
                return await response.json();
            } catch (error) {
                return { error: error.message };
            }
        }

        function showResult(data) {
            const result = document.getElementById("apiResult");
            result.style.display = "block";
            result.innerHTML = \`<pre>\${JSON.stringify(data, null, 2)}</pre>\`;
        }

        async function testHealth() {
            showResult(await makeRequest("/../health"));
        }

        async function testUsers() {
            showResult(await makeRequest("/users"));
        }

        async function testPosts() {
            showResult(await makeRequest("/posts"));
        }

        // Load users and posts on page load
        async function loadData() {
            try {
                const users = await makeRequest("/users");
                const posts = await makeRequest("/posts");

                const usersList = document.getElementById("usersList");
                if (users.error) {
                    usersList.innerHTML = \`<p style="color: red;">Error: \${users.error}</p>\`;
                } else {
                    usersList.innerHTML = users.users.map(user => 
                        \`<div style="margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 4px;">
                            <strong>\${user.name}</strong> (\${user.email})<br>
                            <small>Followers: \${user.followers}</small>
                        </div>\`
                    ).join("");
                }

                const postsList = document.getElementById("postsList");
                if (posts.error) {
                    postsList.innerHTML = \`<p style="color: red;">Error: \${posts.error}</p>\`;
                } else {
                    postsList.innerHTML = posts.posts.map(post => 
                        \`<div style="margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 4px;">
                            <p><strong>User \${post.user_id}:</strong> \${post.content}</p>
                            <small>‚ù§Ô∏è \${post.likes} likes ‚Ä¢ üí¨ \${post.comments} comments ‚Ä¢ üìÖ \${new Date(post.created_at).toLocaleDateString()}</small>
                        </div>\`
                    ).join("");
                }
            } catch (error) {
                console.error("Failed to load data:", error);
            }
        }

        // Load data when page loads
        document.addEventListener("DOMContentLoaded", loadData);
    </script>
</body>
</html>
EOF

# Production stage with nginx
FROM nginx:alpine

# Copy built application from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Create nginx configuration
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html index.htm; \
        try_files $uri $uri/ /index.html; \
    } \
    location /api/ { \
        proxy_pass http://social-media-backend:3000/api/; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
    location /health { \
        proxy_pass http://social-media-backend:3000/health; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]