apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: educational-platform
  labels:
    app: backend
    app.kubernetes.io/name: educational-platform
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        app.kubernetes.io/name: educational-platform
        app.kubernetes.io/component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U $(POSTGRES_USER); do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_USER
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-service -p 6379 -a $(REDIS_PASSWORD) ping; do
            echo "Waiting for Redis to be ready..."
            sleep 2
          done
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
      containers:
      - name: backend
        image: educational-platform/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        # Database Configuration
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres-service:5432/$(POSTGRES_DB)"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: POSTGRES_DB
        
        # Redis Configuration
        - name: SPRING_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_HOST
        - name: SPRING_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_PORT
        - name: SPRING_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
        
        # JWT Configuration
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: JWT_SECRET
        - name: JWT_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: JWT_EXPIRATION
        - name: JWT_REFRESH_EXPIRATION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: JWT_REFRESH_EXPIRATION
        
        # Application Configuration
        - name: SPRING_PROFILES_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_PROFILES_ACTIVE
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SERVER_PORT
        - name: CORS_ALLOWED_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: CORS_ALLOWED_ORIGINS
        
        # File Upload Configuration
        - name: SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE
        - name: SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE
        - name: FILE_STORAGE_LOCATION
          value: "/app/uploads"
        
        # Email Configuration
        - name: SPRING_MAIL_USERNAME
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MAIL_USERNAME
        - name: SPRING_MAIL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MAIL_PASSWORD
        
        # JPA Configuration
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_JPA_HIBERNATE_DDL_AUTO
        - name: SPRING_JPA_SHOW_SQL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: SPRING_JPA_SHOW_SQL
        
        # Logging Configuration
        - name: LOGGING_LEVEL_COM_EDUPLATFORM
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: LOGGING_LEVEL_COM_EDUPLATFORM
        
        volumeMounts:
        - name: uploads-storage
          mountPath: /app/uploads
        - name: temp-storage
          mountPath: /tmp
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 10
        
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: uploads-storage
        persistentVolumeClaim:
          claimName: backend-uploads-pvc
      - name: temp-storage
        emptyDir: {}
      
      securityContext:
        fsGroup: 1000
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: educational-platform
  labels:
    app: backend
    app.kubernetes.io/name: educational-platform
    app.kubernetes.io/component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: backend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: educational-platform
  labels:
    app: backend
    app.kubernetes.io/name: educational-platform
    app.kubernetes.io/component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
