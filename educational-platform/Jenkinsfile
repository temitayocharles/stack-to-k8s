pipeline {
    agent any

    environment {
        REGISTRY = 'your-registry.com'
        IMAGE_NAME = 'educational-platform'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    // Load environment variables from config files
                    if (env.BRANCH_NAME == 'main') {
                        env.ENV_FILE = 'config/production.env'
                    } else if (env.BRANCH_NAME == 'develop') {
                        env.ENV_FILE = 'config/staging.env'
                    } else {
                        env.ENV_FILE = 'config/development.env'
                    }
                }
                sh 'cat ${ENV_FILE}'
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            sh 'python -m pip install --upgrade pip'
                            sh 'pip install -r requirements.txt'
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            sh 'npm install'
                        }
                    }
                }
            }
        }

        stage('Test') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            sh 'python -m pytest tests/ -v --cov=. --cov-report=xml --junitxml=test-results.xml'
                        }
                    }
                    post {
                        always {
                            junit 'backend/test-results.xml'
                            publishCoverage adapters: [coberturaAdapter('backend/coverage.xml')]
                        }
                    }
                }
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm test -- --watchAll=false --coverage --testResultsProcessor=jest-junit'
                        }
                    }
                    post {
                        always {
                            junit 'frontend/junit.xml'
                        }
                    }
                }
            }
        }

        stage('Security Scan') {
            parallel {
                stage('Trivy Scan') {
                    steps {
                        sh '''
                            docker run --rm -v $WORKSPACE:/root/.cache/ aquasecurity/trivy:0.40.0 fs \
                                --format json --output trivy-results.json .
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'trivy-results.json', fingerprint: true
                        }
                    }
                }
                stage('Kubesec Scan') {
                    steps {
                        sh '''
                            docker run --rm -v $WORKSPACE/k8s:/k8s controlplaneio/kubesec:v2 scan /k8s \
                                --format json --output kubesec-results.json
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'kubesec-results.json', fingerprint: true
                        }
                    }
                }
            }
        }

        stage('Build Images') {
            parallel {
                stage('Build Backend') {
                    steps {
                        dir('backend') {
                            sh '''
                                docker build -t ${REGISTRY}/${IMAGE_NAME}-backend:${DOCKER_TAG} \
                                    --build-arg ENV_FILE=../${ENV_FILE} .
                            '''
                        }
                    }
                }
                stage('Build Frontend') {
                    steps {
                        dir('frontend') {
                            sh '''
                                docker build -t ${REGISTRY}/${IMAGE_NAME}-frontend:${DOCKER_TAG} \
                                    --build-arg ENV_FILE=../${ENV_FILE} .
                            '''
                        }
                    }
                }
            }
        }

        stage('Push Images') {
            steps {
                sh '''
                    docker login ${REGISTRY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                    docker push ${REGISTRY}/${IMAGE_NAME}-backend:${DOCKER_TAG}
                    docker push ${REGISTRY}/${IMAGE_NAME}-frontend:${DOCKER_TAG}
                '''
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig-staging']) {
                        sh '''
                            # Update image tags in manifests
                            sed -i "s|image:.*|image: ${REGISTRY}/${IMAGE_NAME}-backend:${DOCKER_TAG}|g" k8s/base/02-backend.yaml
                            sed -i "s|image:.*|image: ${REGISTRY}/${IMAGE_NAME}-frontend:${DOCKER_TAG}|g" k8s/base/03-frontend.yaml

                            # Deploy to staging
                            kubectl apply -f k8s/base/

                            # Wait for rollout
                            kubectl rollout status deployment/educational-backend -n educational --timeout=300s
                            kubectl rollout status deployment/educational-frontend -n educational --timeout=300s
                        '''
                    }
                }
            }
            post {
                success {
                    script {
                        // Run integration tests
                        withKubeConfig([credentialsId: 'kubeconfig-staging']) {
                            sh '''
                                kubectl run integration-test --image=curlimages/curl --rm -i --restart=Never -- \
                                    curl -f http://educational-frontend.educational.svc.cluster.local/api/health
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
                beforeInput true
            }
            input {
                message 'Deploy to Production?'
                ok 'Deploy'
                submitterParameter 'APPROVER'
            }
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig-production']) {
                        sh '''
                            # Update image tags in manifests
                            sed -i "s|image:.*|image: ${REGISTRY}/${IMAGE_NAME}-backend:${DOCKER_TAG}|g" k8s/production/02-backend.yaml
                            sed -i "s|image:.*|image: ${REGISTRY}/${IMAGE_NAME}-frontend:${DOCKER_TAG}|g" k8s/production/03-frontend.yaml

                            # Deploy to production
                            kubectl apply -f k8s/production/

                            # Wait for rollout
                            kubectl rollout status deployment/educational-backend -n educational --timeout=600s
                            kubectl rollout status deployment/educational-frontend -n educational --timeout=600s
                        '''
                    }
                }
            }
            post {
                success {
                    script {
                        // Run smoke tests
                        withKubeConfig([credentialsId: 'kubeconfig-production']) {
                            sh '''
                                kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
                                    curl -f http://educational-frontend.educational.svc.cluster.local
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images
            sh 'docker system prune -f'

            // Archive test results and logs
            archiveArtifacts artifacts: '**/*.xml, **/*.json', fingerprint: true, allowEmptyArchive: true

            // Send notifications
            script {
                def color = currentBuild.result == 'SUCCESS' ? 'good' : 'danger'
                def message = "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - ${currentBuild.result}"

                // Slack notification (configure webhook URL in Jenkins)
                // slackSend(color: color, message: message)
            }
        }
        failure {
            script {
                // Send failure notifications
                echo 'Pipeline failed. Check the logs for details.'
                // Add additional failure handling here
            }
        }
    }
}
