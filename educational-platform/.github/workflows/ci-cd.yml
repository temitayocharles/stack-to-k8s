name: Educational Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: educational-platform

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: educational_platform_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/educational_platform_test
        REDIS_URL: redis://localhost:6379/0

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --watchAll=false --coverage --testResultsProcessor=jest-junit

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml,./frontend/coverage/cobertura-coverage.xml
        flags: backend,frontend
        name: code-coverage

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Kubesec scan
      uses: controlplaneio/kubesec-action@master
      with:
        path: k8s/
        format: json
        output: kubesec-results.json

    - name: Upload Kubesec results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          kubesec-results.json

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Deploy to staging
      run: |
        # Replace image tags in k8s manifests
        sed -i 's|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-backend|g' k8s/base/02-backend.yaml
        sed -i 's|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-frontend|g' k8s/base/03-frontend.yaml

        # Apply Kubernetes manifests
        kubectl apply -f k8s/base/

        # Wait for rollout
        kubectl rollout status deployment/educational-backend -n educational
        kubectl rollout status deployment/educational-frontend -n educational

    - name: Run integration tests
      run: |
        # Install kubectl-kuttl for integration testing
        curl -Lo kubectl-kuttl https://github.com/kudobuilder/kuttl/releases/download/v0.15.0/kubectl-kuttl_0.15.0_linux_x86_64
        chmod +x kubectl-kuttl
        sudo mv kubectl-kuttl /usr/local/bin/

        # Run integration tests
        kubectl kuttl test --config tests/integration/kuttl-test.yaml

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Deploy to production
      run: |
        # Replace image tags in k8s manifests
        sed -i 's|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-backend|g' k8s/production/02-backend.yaml
        sed -i 's|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-frontend|g' k8s/production/03-frontend.yaml

        # Apply Kubernetes manifests
        kubectl apply -f k8s/production/

        # Wait for rollout
        kubectl rollout status deployment/educational-backend -n educational
        kubectl rollout status deployment/educational-frontend -n educational

    - name: Run smoke tests
      run: |
        # Simple smoke test to verify deployment
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- curl -f http://educational-frontend.educational.svc.cluster.local
        kubectl run smoke-test-backend --image=curlimages/curl --rm -i --restart=Never -- curl -f http://educational-backend.educational.svc.cluster.local/api/health

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Cleanup old images
      run: |
        # Clean up old container images to save storage
        docker system prune -f

    - name: Notify on failure
      if: failure()
      run: |
        echo "Pipeline failed. Check the logs for details."
        # Add notification logic here (Slack, email, etc.)
