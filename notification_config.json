{
  "notification_pipeline": {
    "description": "Multi-Application Notification Pipeline Configuration",
    "version": "1.0.0",
    "last_updated": "2024-01-15",
    "applications": {
      "task-management": {
        "name": "Task Management AI System",
        "description": "Advanced task management with AI and real-time collaboration",
        "enabled_channels": ["slack", "email", "webhook"],
        "default_recipients": ["dev-team@company.com", "product-team@company.com"],
        "routing_rules": [
          {
            "event_type": "deployment",
            "condition": "environment == 'production'",
            "channels": ["slack", "email"],
            "priority": "high",
            "recipients": ["dev-team@company.com", "ops-team@company.com"]
          },
          {
            "event_type": "security",
            "condition": "severity == 'critical'",
            "channels": ["slack", "email", "sms"],
            "priority": "critical",
            "recipients": ["security-team@company.com", "dev-team@company.com"]
          }
        ],
        "templates": {
          "deployment": "üöÄ **{{.Title}}**\n\n{{.Message}}\n\n*Application:* Task Management AI\n*Environment:* {{.Context.Environment}}\n*Version:* {{.Details.version}}\n\n[View Details]({{.Details.dashboard_url}})",
          "security": "üîí **Security Alert**\n\n{{.Message}}\n\n*Application:* Task Management AI\n*Severity:* {{.Details.severity}}\n*Component:* {{.Details.component}}\n\nImmediate attention required!",
          "performance": "üìä **Performance Alert**\n\n{{.Message}}\n\n*Application:* Task Management AI\n*Metric:* {{.Details.metric}}\n*Threshold:* {{.Details.threshold}}\n*Current:* {{.Details.current}}"
        }
      },
      "ecommerce": {
        "name": "E-commerce Platform",
        "description": "Node.js/Express + React + MongoDB e-commerce application",
        "enabled_channels": ["slack", "email"],
        "default_recipients": ["ecommerce-team@company.com", "sales-team@company.com"],
        "templates": {
          "deployment": "üõí **{{.Title}}**\n\n{{.Message}}\n\n*Application:* E-commerce Platform\n*Environment:* {{.Context.Environment}}\n*Version:* {{.Details.version}}\n\n[View Store]({{.Details.store_url}})",
          "order": "üí∞ **New Order Alert**\n\n{{.Message}}\n\n*Application:* E-commerce Platform\n*Order ID:* {{.Details.order_id}}\n*Amount:* {{.Details.amount}}\n*Customer:* {{.Details.customer_email}}",
          "inventory": "üì¶ **Inventory Alert**\n\n{{.Message}}\n\n*Application:* E-commerce Platform\n*Product:* {{.Details.product_name}}\n*Stock Level:* {{.Details.stock_level}}\n*Threshold:* {{.Details.threshold}}"
        }
      },
      "educational": {
        "name": "Educational Platform",
        "description": "Java Spring Boot + Angular + PostgreSQL learning management system",
        "enabled_channels": ["mattermost", "email"],
        "default_recipients": ["education-team@company.com", "academic-team@company.com"],
        "templates": {
          "deployment": "üéì **{{.Title}}**\n\n{{.Message}}\n\n*Application:* Educational Platform\n*Environment:* {{.Context.Environment}}\n*Version:* {{.Details.version}}\n\n[Access Platform]({{.Details.platform_url}})",
          "enrollment": "üìö **Student Enrollment**\n\n{{.Message}}\n\n*Application:* Educational Platform\n*Course:* {{.Details.course_name}}\n*Student:* {{.Details.student_name}}\n*Enrollment Date:* {{.Details.enrollment_date}}",
          "assessment": "üìù **Assessment Submitted**\n\n{{.Message}}\n\n*Application:* Educational Platform\n*Course:* {{.Details.course_name}}\n*Student:* {{.Details.student_name}}\n*Grade:* {{.Details.grade}}"
        }
      },
      "medical": {
        "name": "Medical Care System",
        "description": ".NET Core + Blazor + SQL Server healthcare management system",
        "enabled_channels": ["email", "webhook"],
        "default_recipients": ["medical-team@company.com", "compliance-team@company.com"],
        "routing_rules": [
          {
            "event_type": "emergency",
            "condition": "priority == 'critical'",
            "channels": ["email", "sms", "webhook"],
            "priority": "critical",
            "recipients": ["emergency-response@company.com", "medical-staff@company.com"],
            "escalation": {
              "after_duration": "5m",
              "escalate_to": ["hospital-admin@company.com"],
              "new_priority": "critical"
            }
          }
        ],
        "templates": {
          "deployment": "üè• **{{.Title}}**\n\n{{.Message}}\n\n*Application:* Medical Care System\n*Environment:* {{.Context.Environment}}\n*Version:* {{.Details.version}}\n\n[Access System]({{.Details.system_url}})",
          "emergency": "üö® **Medical Emergency Alert**\n\n{{.Message}}\n\n*Application:* Medical Care System\n*Patient ID:* {{.Details.patient_id}}\n*Priority:* {{.Details.priority}}\n*Location:* {{.Details.location}}\n\nIMMEDIATE ATTENTION REQUIRED!",
          "compliance": "‚öñÔ∏è **Compliance Alert**\n\n{{.Message}}\n\n*Application:* Medical Care System\n*Regulation:* {{.Details.regulation}}\n*Issue:* {{.Details.issue}}\n*Action Required:* {{.Details.action_required}}"
        }
      },
      "social-media": {
        "name": "Social Media Platform",
        "description": "Ruby on Rails + React Native Web + PostgreSQL social networking platform",
        "enabled_channels": ["slack", "webhook"],
        "default_recipients": ["social-team@company.com", "community-team@company.com"],
        "templates": {
          "deployment": "üåê **{{.Title}}**\n\n{{.Message}}\n\n*Application:* Social Media Platform\n*Environment:* {{.Context.Environment}}\n*Version:* {{.Details.version}}\n\n[Visit Platform]({{.Details.platform_url}})",
          "engagement": "üìà **High Engagement Alert**\n\n{{.Message}}\n\n*Application:* Social Media Platform\n*Post:* {{.Details.post_title}}\n*Engagement:* {{.Details.engagement_rate}}%\n*Trend:* {{.Details.trend}}",
          "moderation": "‚ö†Ô∏è **Content Moderation Alert**\n\n{{.Message}}\n\n*Application:* Social Media Platform\n*Content Type:* {{.Details.content_type}}\n*Severity:* {{.Details.severity}}\n*Action:* {{.Details.action_required}}"
        }
      },
      "weather": {
        "name": "Weather Application",
        "description": "Python Flask + Vue.js + Redis weather forecasting application",
        "enabled_channels": ["webhook", "email"],
        "default_recipients": ["weather-team@company.com", "data-team@company.com"],
        "routing_rules": [
          {
            "event_type": "alert",
            "condition": "severity == 'severe'",
            "channels": ["webhook", "email"],
            "priority": "high",
            "recipients": ["emergency-services@company.com", "weather-team@company.com"]
          }
        ],
        "templates": {
          "deployment": "üå§Ô∏è **{{.Title}}**\n\n{{.Message}}\n\n*Application:* Weather Application\n*Environment:* {{.Context.Environment}}\n*Version:* {{.Details.version}}\n\n[View Dashboard]({{.Details.dashboard_url}})",
          "alert": "‚õàÔ∏è **Weather Alert**\n\n{{.Message}}\n\n*Application:* Weather Application\n*Alert Type:* {{.Details.alert_type}}\n*Severity:* {{.Details.severity}}\n*Location:* {{.Details.location}}\n\n[View Details]({{.Details.alert_url}})",
          "data": "üìä **Data Quality Alert**\n\n{{.Message}}\n\n*Application:* Weather Application\n*Data Source:* {{.Details.data_source}}\n*Issue:* {{.Details.issue}}\n*Impact:* {{.Details.impact}}"
        }
      }
    },
    "communication_channels": {
      "slack": {
        "description": "Team collaboration and quick alerts",
        "setup_required": "Create webhook URL in Slack workspace",
        "configuration_key": "slack_webhook_url",
        "example": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
      },
      "mattermost": {
        "description": "Open-source alternative to Slack",
        "setup_required": "Create webhook URL in Mattermost",
        "configuration_key": "mattermost_webhook_url",
        "example": "https://mattermost.example.com/hooks/XXXXXXXXXXXXXXXXXXXXXX"
      },
      "email": {
        "description": "Formal notifications and detailed reports",
        "setup_required": "Configure SMTP server settings",
        "configuration_key": "smtp_config",
        "example": {
          "host": "smtp.gmail.com",
          "port": 587,
          "username": "your-email@gmail.com",
          "password": "your-app-password",
          "from": "noreply@company.com",
          "use_tls": true
        }
      },
      "webhook": {
        "description": "Integration with external systems",
        "setup_required": "Provide endpoint URL and optional headers",
        "configuration_key": "webhook_config",
        "example": {
          "url": "https://api.example.com/webhooks/notifications",
          "headers": {
            "Authorization": "Bearer your-token",
            "Content-Type": "application/json"
          }
        }
      },
      "sms": {
        "description": "Critical alerts and emergency notifications",
        "setup_required": "Configure SMS gateway service",
        "configuration_key": "sms_config",
        "note": "SMS channel requires additional implementation"
      }
    },
    "usage_examples": {
      "send_deployment_notification": {
        "description": "Send deployment notification for task management app",
        "code": "msg := &NotificationMessage{\n    Application: \"task-management\",\n    Type: NotificationTypeDeployment,\n    Priority: PriorityHigh,\n    Title: \"New Deployment\",\n    Message: \"Version 1.2.3 deployed successfully\",\n    Template: \"deployment\",\n    Context: &NotificationContext{\n        Environment: \"production\",\n    },\n    Details: map[string]interface{}{\n        \"version\": \"1.2.3\",\n        \"dashboard_url\": \"https://dashboard.example.com\",\n    },\n}\n\nerr := pipeline.SendNotification(ctx, msg)"
      },
      "remove_unused_channel": {
        "description": "Remove Slack notifications for weather application",
        "code": "err := pipeline.RemoveApplicationChannel(\"weather\", ChannelSlack)"
      },
      "add_channel": {
        "description": "Add webhook notifications for ecommerce application",
        "code": "err := pipeline.AddApplicationChannel(\"ecommerce\", ChannelWebhook)"
      },
      "configure_application": {
        "description": "Configure custom settings for an application",
        "code": "config := &ApplicationNotificationConfig{\n    Name: \"Custom App\",\n    EnabledChannels: []NotificationChannel{ChannelEmail, ChannelWebhook},\n    DefaultRecipients: []string{\"team@company.com\"},\n}\n\nerr := pipeline.ConfigureApplication(\"custom-app\", config)"
      }
    },
    "best_practices": [
      "Choose appropriate channels for each application type",
      "Configure routing rules for critical events",
      "Use templates for consistent messaging",
      "Set up escalation for time-sensitive alerts",
      "Remove unused channels to reduce noise",
      "Test notifications in staging before production",
      "Monitor delivery success rates through analytics",
      "Regularly review and update notification configurations"
    ],
    "troubleshooting": {
      "notifications_not_sent": [
        "Check application configuration",
        "Verify webhook URLs and credentials",
        "Review routing rules for proper event handling",
        "Check analytics for delivery success rates"
      ],
      "template_errors": [
        "Ensure template variables match message context",
        "Check template syntax for Go template format",
        "Verify application-specific template names"
      ],
      "channel_failures": [
        "Validate channel credentials and endpoints",
        "Check network connectivity to external services",
        "Review error logs for specific failure reasons",
        "Consider fallback channels for critical notifications"
      ]
    }
  }
}
